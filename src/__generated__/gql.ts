/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n    query GetUserHomeLocation($userId: ID!) {\n        node(id: $userId) {\n            id\n            ... on User {\n                homeCountry\n                homeState\n                homeCity\n            }\n        }\n    }\n": types.GetUserHomeLocationDocument,
    "\n    mutation UpdateUserHomeLocation($userId: ID!, $country: String!, $state: String!, $city: String!) {\n        updateUser(\n            id: $userId,\n            input: {\n                homeCountry: $country,\n                homeState: $state,\n                homeCity: $city\n            },\n        ) {\n            homeCountry\n            homeState\n            homeCity\n        }\n    }\n": types.UpdateUserHomeLocationDocument,
    "\n    mutation CreateLinkToken($userId: ID!) {\n        createLinkToken(input: { userId: $userId }) {\n            linkToken\n        }\n    }\n": types.CreateLinkTokenDocument,
    "\n    mutation ExchangePublicToken($userId: ID!, $publicToken: String!) {\n        exchangePublicToken(input: {userId: $userId, publicToken: $publicToken})\n    }\n": types.ExchangePublicTokenDocument,
    "\n    mutation MarkNotificationAsCheckedInApp($ids: [ID!]!) {\n        markNotificationsAsCheckedInApp(ids: $ids)\n    }\n": types.MarkNotificationAsCheckedInAppDocument,
    "\n    query GetUserUnreadNotifications($userId: ID!, $currentTime: Time) {\n        notifications(\n            where: {\n                checkedInApp: false,\n                or: [\n                    {hasNotificationDiscountOffer: false},\n                    {\n                        hasNotificationDiscountOfferWith: {\n                            expiresAtGT: $currentTime\n                        }\n                    }\n                ],\n                hasNotificationRecipientWith: {id: $userId}\n            },\n            orderBy: {field: CREATED_AT, direction: DESC}\n        ) {\n            edges {\n                node {\n                    id\n                    type\n                    checkedInApp\n                    notificationDiscountOffer {\n                        id\n                        amount\n                        type\n                        merchantSpecificIdentification\n                        createdAt\n                        expiresAt\n                        ownerMerchant {\n                            id\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetUserUnreadNotificationsDocument,
    "\n    subscription SubscribeToNewNotifications($userId: ID!) {\n        notification(ownerID: $userId) {\n            id\n            type\n            checkedInApp\n            createdAt\n            #            notificationRecipient {\n            #                id\n            #                identityProviderID\n            #            }\n            notificationDiscountOffer {\n                id\n                amount\n                type\n                merchantSpecificIdentification\n                createdAt\n                expiresAt\n                ownerMerchant {\n                    id\n                    name\n                }\n            }\n        }\n    }\n": types.SubscribeToNewNotificationsDocument,
    "\n    query GetAccountTransactions($accountId: ID!) {\n        node(id: $accountId) {\n            id\n            ... on PlaidInstitutionAccount {\n                name\n                balanceAvailable\n                balanceCurrent\n                balanceIsoCurrencyCode\n                transactions(orderBy: {field: DATE, direction: DESC}) {\n                    edges {\n                        node {\n                            amount\n                            isoCurrencyCode\n                            name\n                            merchantName\n                            category\n                            date\n                            datetime\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetAccountTransactionsDocument,
    "\n    query GetAccountsAndTransactions($userId: ID!) {\n        plaidInstitutions(where: {hasPlaidItemWith: {hasOwnerWith: {id: $userId}}}) {\n            edges {\n                node {\n                    id\n                    name\n                    accounts {\n                        id\n                        name\n                        balanceAvailable\n                        balanceCurrent\n                        balanceIsoCurrencyCode\n                    }\n                }\n            }\n        }\n        transactions(\n            where: {\n                hasInstitutionAccountWith: {\n                    hasParentInstitutionWith: {\n                        hasPlaidItemWith: {\n                            hasOwnerWith: {id: $userId}\n                        }\n                    }\n                }\n            }\n            orderBy: {field: DATE, direction: DESC}\n        ) {\n            edges {\n                node {\n                    amount\n                    isoCurrencyCode\n                    name\n                    category\n                    date\n                }\n            }\n        }\n    }\n": types.GetAccountsAndTransactionsDocument,
    "\n    query GetUserWithPlaidItems($userId: ID!) {\n        node(id: $userId) {\n            id\n            ... on User {\n                plaidItems {\n                    institution {\n                        name\n                        accounts {\n                            id\n                            name\n                            type\n                            balanceAvailable\n                            balanceCurrent\n                            balanceIsoCurrencyCode\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetUserWithPlaidItemsDocument,
    "\n    query GetActiveDiscountOffers($userId: ID!, $currentTime: Time) {\n        discountOffers(\n            where: {\n                expiresAtGTE: $currentTime,\n                hasDiscountEligibleUsersWith: {id: $userId}\n            },\n            orderBy: {field: CREATED_AT, direction: DESC}\n        ) {\n            edges {\n                node {\n                    id\n                    amount\n                    type\n                    merchantSpecificIdentification\n                    expiresAt\n                    ownerMerchant {\n                        id\n                        name\n                    }\n                }\n            }\n        }\n    }\n": types.GetActiveDiscountOffersDocument,
    "\n    mutation ExchangeAuthTokenForUserProfile($identityProviderId: String!) {\n        exchangeAuthTokenForUserProfile(input: {identityProviderID: $identityProviderId}) {\n            id\n            identityProviderID\n        }\n    }\n": types.ExchangeAuthTokenForUserProfileDocument,
    "\n    query GetUserSettings($userId: ID!) {\n        spendingCategories(where: {hasInterestedUsersWith: {id: $userId}}) {\n            edges {\n                node {\n                    id\n                    name\n                }\n            }\n        }\n        totalSpendingCategories: spendingCategories {\n            edges {\n                node {\n                    id\n                    name\n                }\n            }\n        }\n        notificationChannels(where: {hasChanelUsersWith: {id: $userId}}) {\n            edges {\n                node {\n                    chanel\n                }\n            }\n        }\n        offerFrequency: node(id: $userId) {\n            id\n            ... on User {\n                offerFrequency\n            }\n        }\n    }\n": types.GetUserSettingsDocument,
    "\n    mutation SaveSpendingCategoriesPreferences($userId: ID!, $selectedCategories: [ID!]!) {\n        setSpendingCategories(userID: $userId, spendingCategoryIDs: $selectedCategories) {\n            spendingCategories {\n                id\n                name\n            }\n        }\n    }\n": types.SaveSpendingCategoriesPreferencesDocument,
    "\n    mutation SaveNotificationChannelPreferences($userId: ID!, $notificationChannels: [UserNotificationChannelPreferencesChanel!]!) {\n        setNotificationChannels(userID: $userId, notificationChannel: $notificationChannels) {\n            notificationChannels {\n                chanel\n            }\n        }\n    }\n": types.SaveNotificationChannelPreferencesDocument,
    "\n    mutation SaveOfferFrequencyPreferences($userId: ID!, $frequency: UserOfferFrequency!) {\n        setOfferFrequency(userID: $userId, frequency: $frequency) {\n            offerFrequency\n        }\n    }\n": types.SaveOfferFrequencyPreferencesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetUserHomeLocation($userId: ID!) {\n        node(id: $userId) {\n            id\n            ... on User {\n                homeCountry\n                homeState\n                homeCity\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserHomeLocation($userId: ID!) {\n        node(id: $userId) {\n            id\n            ... on User {\n                homeCountry\n                homeState\n                homeCity\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateUserHomeLocation($userId: ID!, $country: String!, $state: String!, $city: String!) {\n        updateUser(\n            id: $userId,\n            input: {\n                homeCountry: $country,\n                homeState: $state,\n                homeCity: $city\n            },\n        ) {\n            homeCountry\n            homeState\n            homeCity\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateUserHomeLocation($userId: ID!, $country: String!, $state: String!, $city: String!) {\n        updateUser(\n            id: $userId,\n            input: {\n                homeCountry: $country,\n                homeState: $state,\n                homeCity: $city\n            },\n        ) {\n            homeCountry\n            homeState\n            homeCity\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateLinkToken($userId: ID!) {\n        createLinkToken(input: { userId: $userId }) {\n            linkToken\n        }\n    }\n"): (typeof documents)["\n    mutation CreateLinkToken($userId: ID!) {\n        createLinkToken(input: { userId: $userId }) {\n            linkToken\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation ExchangePublicToken($userId: ID!, $publicToken: String!) {\n        exchangePublicToken(input: {userId: $userId, publicToken: $publicToken})\n    }\n"): (typeof documents)["\n    mutation ExchangePublicToken($userId: ID!, $publicToken: String!) {\n        exchangePublicToken(input: {userId: $userId, publicToken: $publicToken})\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation MarkNotificationAsCheckedInApp($ids: [ID!]!) {\n        markNotificationsAsCheckedInApp(ids: $ids)\n    }\n"): (typeof documents)["\n    mutation MarkNotificationAsCheckedInApp($ids: [ID!]!) {\n        markNotificationsAsCheckedInApp(ids: $ids)\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetUserUnreadNotifications($userId: ID!, $currentTime: Time) {\n        notifications(\n            where: {\n                checkedInApp: false,\n                or: [\n                    {hasNotificationDiscountOffer: false},\n                    {\n                        hasNotificationDiscountOfferWith: {\n                            expiresAtGT: $currentTime\n                        }\n                    }\n                ],\n                hasNotificationRecipientWith: {id: $userId}\n            },\n            orderBy: {field: CREATED_AT, direction: DESC}\n        ) {\n            edges {\n                node {\n                    id\n                    type\n                    checkedInApp\n                    notificationDiscountOffer {\n                        id\n                        amount\n                        type\n                        merchantSpecificIdentification\n                        createdAt\n                        expiresAt\n                        ownerMerchant {\n                            id\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserUnreadNotifications($userId: ID!, $currentTime: Time) {\n        notifications(\n            where: {\n                checkedInApp: false,\n                or: [\n                    {hasNotificationDiscountOffer: false},\n                    {\n                        hasNotificationDiscountOfferWith: {\n                            expiresAtGT: $currentTime\n                        }\n                    }\n                ],\n                hasNotificationRecipientWith: {id: $userId}\n            },\n            orderBy: {field: CREATED_AT, direction: DESC}\n        ) {\n            edges {\n                node {\n                    id\n                    type\n                    checkedInApp\n                    notificationDiscountOffer {\n                        id\n                        amount\n                        type\n                        merchantSpecificIdentification\n                        createdAt\n                        expiresAt\n                        ownerMerchant {\n                            id\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    subscription SubscribeToNewNotifications($userId: ID!) {\n        notification(ownerID: $userId) {\n            id\n            type\n            checkedInApp\n            createdAt\n            #            notificationRecipient {\n            #                id\n            #                identityProviderID\n            #            }\n            notificationDiscountOffer {\n                id\n                amount\n                type\n                merchantSpecificIdentification\n                createdAt\n                expiresAt\n                ownerMerchant {\n                    id\n                    name\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    subscription SubscribeToNewNotifications($userId: ID!) {\n        notification(ownerID: $userId) {\n            id\n            type\n            checkedInApp\n            createdAt\n            #            notificationRecipient {\n            #                id\n            #                identityProviderID\n            #            }\n            notificationDiscountOffer {\n                id\n                amount\n                type\n                merchantSpecificIdentification\n                createdAt\n                expiresAt\n                ownerMerchant {\n                    id\n                    name\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAccountTransactions($accountId: ID!) {\n        node(id: $accountId) {\n            id\n            ... on PlaidInstitutionAccount {\n                name\n                balanceAvailable\n                balanceCurrent\n                balanceIsoCurrencyCode\n                transactions(orderBy: {field: DATE, direction: DESC}) {\n                    edges {\n                        node {\n                            amount\n                            isoCurrencyCode\n                            name\n                            merchantName\n                            category\n                            date\n                            datetime\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAccountTransactions($accountId: ID!) {\n        node(id: $accountId) {\n            id\n            ... on PlaidInstitutionAccount {\n                name\n                balanceAvailable\n                balanceCurrent\n                balanceIsoCurrencyCode\n                transactions(orderBy: {field: DATE, direction: DESC}) {\n                    edges {\n                        node {\n                            amount\n                            isoCurrencyCode\n                            name\n                            merchantName\n                            category\n                            date\n                            datetime\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAccountsAndTransactions($userId: ID!) {\n        plaidInstitutions(where: {hasPlaidItemWith: {hasOwnerWith: {id: $userId}}}) {\n            edges {\n                node {\n                    id\n                    name\n                    accounts {\n                        id\n                        name\n                        balanceAvailable\n                        balanceCurrent\n                        balanceIsoCurrencyCode\n                    }\n                }\n            }\n        }\n        transactions(\n            where: {\n                hasInstitutionAccountWith: {\n                    hasParentInstitutionWith: {\n                        hasPlaidItemWith: {\n                            hasOwnerWith: {id: $userId}\n                        }\n                    }\n                }\n            }\n            orderBy: {field: DATE, direction: DESC}\n        ) {\n            edges {\n                node {\n                    amount\n                    isoCurrencyCode\n                    name\n                    category\n                    date\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAccountsAndTransactions($userId: ID!) {\n        plaidInstitutions(where: {hasPlaidItemWith: {hasOwnerWith: {id: $userId}}}) {\n            edges {\n                node {\n                    id\n                    name\n                    accounts {\n                        id\n                        name\n                        balanceAvailable\n                        balanceCurrent\n                        balanceIsoCurrencyCode\n                    }\n                }\n            }\n        }\n        transactions(\n            where: {\n                hasInstitutionAccountWith: {\n                    hasParentInstitutionWith: {\n                        hasPlaidItemWith: {\n                            hasOwnerWith: {id: $userId}\n                        }\n                    }\n                }\n            }\n            orderBy: {field: DATE, direction: DESC}\n        ) {\n            edges {\n                node {\n                    amount\n                    isoCurrencyCode\n                    name\n                    category\n                    date\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetUserWithPlaidItems($userId: ID!) {\n        node(id: $userId) {\n            id\n            ... on User {\n                plaidItems {\n                    institution {\n                        name\n                        accounts {\n                            id\n                            name\n                            type\n                            balanceAvailable\n                            balanceCurrent\n                            balanceIsoCurrencyCode\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserWithPlaidItems($userId: ID!) {\n        node(id: $userId) {\n            id\n            ... on User {\n                plaidItems {\n                    institution {\n                        name\n                        accounts {\n                            id\n                            name\n                            type\n                            balanceAvailable\n                            balanceCurrent\n                            balanceIsoCurrencyCode\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetActiveDiscountOffers($userId: ID!, $currentTime: Time) {\n        discountOffers(\n            where: {\n                expiresAtGTE: $currentTime,\n                hasDiscountEligibleUsersWith: {id: $userId}\n            },\n            orderBy: {field: CREATED_AT, direction: DESC}\n        ) {\n            edges {\n                node {\n                    id\n                    amount\n                    type\n                    merchantSpecificIdentification\n                    expiresAt\n                    ownerMerchant {\n                        id\n                        name\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetActiveDiscountOffers($userId: ID!, $currentTime: Time) {\n        discountOffers(\n            where: {\n                expiresAtGTE: $currentTime,\n                hasDiscountEligibleUsersWith: {id: $userId}\n            },\n            orderBy: {field: CREATED_AT, direction: DESC}\n        ) {\n            edges {\n                node {\n                    id\n                    amount\n                    type\n                    merchantSpecificIdentification\n                    expiresAt\n                    ownerMerchant {\n                        id\n                        name\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation ExchangeAuthTokenForUserProfile($identityProviderId: String!) {\n        exchangeAuthTokenForUserProfile(input: {identityProviderID: $identityProviderId}) {\n            id\n            identityProviderID\n        }\n    }\n"): (typeof documents)["\n    mutation ExchangeAuthTokenForUserProfile($identityProviderId: String!) {\n        exchangeAuthTokenForUserProfile(input: {identityProviderID: $identityProviderId}) {\n            id\n            identityProviderID\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetUserSettings($userId: ID!) {\n        spendingCategories(where: {hasInterestedUsersWith: {id: $userId}}) {\n            edges {\n                node {\n                    id\n                    name\n                }\n            }\n        }\n        totalSpendingCategories: spendingCategories {\n            edges {\n                node {\n                    id\n                    name\n                }\n            }\n        }\n        notificationChannels(where: {hasChanelUsersWith: {id: $userId}}) {\n            edges {\n                node {\n                    chanel\n                }\n            }\n        }\n        offerFrequency: node(id: $userId) {\n            id\n            ... on User {\n                offerFrequency\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserSettings($userId: ID!) {\n        spendingCategories(where: {hasInterestedUsersWith: {id: $userId}}) {\n            edges {\n                node {\n                    id\n                    name\n                }\n            }\n        }\n        totalSpendingCategories: spendingCategories {\n            edges {\n                node {\n                    id\n                    name\n                }\n            }\n        }\n        notificationChannels(where: {hasChanelUsersWith: {id: $userId}}) {\n            edges {\n                node {\n                    chanel\n                }\n            }\n        }\n        offerFrequency: node(id: $userId) {\n            id\n            ... on User {\n                offerFrequency\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SaveSpendingCategoriesPreferences($userId: ID!, $selectedCategories: [ID!]!) {\n        setSpendingCategories(userID: $userId, spendingCategoryIDs: $selectedCategories) {\n            spendingCategories {\n                id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation SaveSpendingCategoriesPreferences($userId: ID!, $selectedCategories: [ID!]!) {\n        setSpendingCategories(userID: $userId, spendingCategoryIDs: $selectedCategories) {\n            spendingCategories {\n                id\n                name\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SaveNotificationChannelPreferences($userId: ID!, $notificationChannels: [UserNotificationChannelPreferencesChanel!]!) {\n        setNotificationChannels(userID: $userId, notificationChannel: $notificationChannels) {\n            notificationChannels {\n                chanel\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation SaveNotificationChannelPreferences($userId: ID!, $notificationChannels: [UserNotificationChannelPreferencesChanel!]!) {\n        setNotificationChannels(userID: $userId, notificationChannel: $notificationChannels) {\n            notificationChannels {\n                chanel\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SaveOfferFrequencyPreferences($userId: ID!, $frequency: UserOfferFrequency!) {\n        setOfferFrequency(userID: $userId, frequency: $frequency) {\n            offerFrequency\n        }\n    }\n"): (typeof documents)["\n    mutation SaveOfferFrequencyPreferences($userId: ID!, $frequency: UserOfferFrequency!) {\n        setOfferFrequency(userID: $userId, frequency: $frequency) {\n            offerFrequency\n        }\n    }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;