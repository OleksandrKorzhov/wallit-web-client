/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: any;
  /** The builtin Time type */
  Time: any;
};

/**
 * CreateDiscountOfferInput is used for create DiscountOffer object.
 * Input was generated by ent.
 */
export type CreateDiscountOfferInput = {
  amount: Scalars['Int'];
  currency?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
  discountEligibleUserIDs: Array<Scalars['ID']>;
  discountOfferNotificationID?: InputMaybe<Scalars['ID']>;
  expiresAt: Scalars['Time'];
  merchantSpecificIdentification: Scalars['String'];
  ownerMerchantID: Scalars['ID'];
  type?: InputMaybe<DiscountOfferType>;
};

export type CreateLinkTokenParams = {
  userId: Scalars['ID'];
};

/**
 * CreateMerchantInput is used for create Merchant object.
 * Input was generated by ent.
 */
export type CreateMerchantInput = {
  discountOfferIDs?: InputMaybe<Array<Scalars['ID']>>;
  name: Scalars['String'];
};

/**
 * CreateUserInput is used for create User object.
 * Input was generated by ent.
 */
export type CreateUserInput = {
  homeCity?: InputMaybe<Scalars['String']>;
  homeCountry?: InputMaybe<Scalars['String']>;
  homeState?: InputMaybe<Scalars['String']>;
  identityProviderID?: InputMaybe<Scalars['String']>;
  offerFrequency?: InputMaybe<UserOfferFrequency>;
};

export type DiscountOffer = Node & {
  __typename?: 'DiscountOffer';
  amount: Scalars['Int'];
  createdAt: Scalars['Time'];
  currency?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  discountEligibleUsers: Array<User>;
  discountOfferNotification?: Maybe<Notification>;
  expiresAt: Scalars['Time'];
  id: Scalars['ID'];
  merchantSpecificIdentification: Scalars['String'];
  ownerMerchant: Merchant;
  type: DiscountOfferType;
};

/** A connection to a list of items. */
export type DiscountOfferConnection = {
  __typename?: 'DiscountOfferConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DiscountOfferEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type DiscountOfferEdge = {
  __typename?: 'DiscountOfferEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<DiscountOffer>;
};

/** Ordering options for DiscountOffer connections */
export type DiscountOfferOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order DiscountOffers. */
  field: DiscountOfferOrderField;
};

/** Properties by which DiscountOffer connections can be ordered. */
export enum DiscountOfferOrderField {
  CreatedAt = 'CREATED_AT'
}

/** DiscountOfferType is enum for the field type */
export enum DiscountOfferType {
  FixedAmount = 'FIXED_AMOUNT',
  PercentFromPrice = 'PERCENT_FROM_PRICE'
}

/**
 * DiscountOfferWhereInput is used for filtering DiscountOffer objects.
 * Input was generated by ent.
 */
export type DiscountOfferWhereInput = {
  /** amount field predicates */
  amount?: InputMaybe<Scalars['Int']>;
  amountGT?: InputMaybe<Scalars['Int']>;
  amountGTE?: InputMaybe<Scalars['Int']>;
  amountIn?: InputMaybe<Array<Scalars['Int']>>;
  amountLT?: InputMaybe<Scalars['Int']>;
  amountLTE?: InputMaybe<Scalars['Int']>;
  amountNEQ?: InputMaybe<Scalars['Int']>;
  amountNotIn?: InputMaybe<Array<Scalars['Int']>>;
  and?: InputMaybe<Array<DiscountOfferWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** currency field predicates */
  currency?: InputMaybe<Scalars['String']>;
  currencyContains?: InputMaybe<Scalars['String']>;
  currencyContainsFold?: InputMaybe<Scalars['String']>;
  currencyEqualFold?: InputMaybe<Scalars['String']>;
  currencyGT?: InputMaybe<Scalars['String']>;
  currencyGTE?: InputMaybe<Scalars['String']>;
  currencyHasPrefix?: InputMaybe<Scalars['String']>;
  currencyHasSuffix?: InputMaybe<Scalars['String']>;
  currencyIn?: InputMaybe<Array<Scalars['String']>>;
  currencyIsNil?: InputMaybe<Scalars['Boolean']>;
  currencyLT?: InputMaybe<Scalars['String']>;
  currencyLTE?: InputMaybe<Scalars['String']>;
  currencyNEQ?: InputMaybe<Scalars['String']>;
  currencyNotIn?: InputMaybe<Array<Scalars['String']>>;
  currencyNotNil?: InputMaybe<Scalars['Boolean']>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']>;
  descriptionContains?: InputMaybe<Scalars['String']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']>;
  descriptionGT?: InputMaybe<Scalars['String']>;
  descriptionGTE?: InputMaybe<Scalars['String']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']>>;
  descriptionLT?: InputMaybe<Scalars['String']>;
  descriptionLTE?: InputMaybe<Scalars['String']>;
  descriptionNEQ?: InputMaybe<Scalars['String']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** expires_at field predicates */
  expiresAt?: InputMaybe<Scalars['Time']>;
  expiresAtGT?: InputMaybe<Scalars['Time']>;
  expiresAtGTE?: InputMaybe<Scalars['Time']>;
  expiresAtIn?: InputMaybe<Array<Scalars['Time']>>;
  expiresAtLT?: InputMaybe<Scalars['Time']>;
  expiresAtLTE?: InputMaybe<Scalars['Time']>;
  expiresAtNEQ?: InputMaybe<Scalars['Time']>;
  expiresAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** discount_eligible_users edge predicates */
  hasDiscountEligibleUsers?: InputMaybe<Scalars['Boolean']>;
  hasDiscountEligibleUsersWith?: InputMaybe<Array<UserWhereInput>>;
  /** discount_offer_notification edge predicates */
  hasDiscountOfferNotification?: InputMaybe<Scalars['Boolean']>;
  hasDiscountOfferNotificationWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** owner_merchant edge predicates */
  hasOwnerMerchant?: InputMaybe<Scalars['Boolean']>;
  hasOwnerMerchantWith?: InputMaybe<Array<MerchantWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** merchant_specific_identification field predicates */
  merchantSpecificIdentification?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationContains?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationContainsFold?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationEqualFold?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationGT?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationGTE?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationHasPrefix?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationHasSuffix?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationIn?: InputMaybe<Array<Scalars['String']>>;
  merchantSpecificIdentificationLT?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationLTE?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationNEQ?: InputMaybe<Scalars['String']>;
  merchantSpecificIdentificationNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<DiscountOfferWhereInput>;
  or?: InputMaybe<Array<DiscountOfferWhereInput>>;
  /** type field predicates */
  type?: InputMaybe<DiscountOfferType>;
  typeIn?: InputMaybe<Array<DiscountOfferType>>;
  typeNEQ?: InputMaybe<DiscountOfferType>;
  typeNotIn?: InputMaybe<Array<DiscountOfferType>>;
};

export type ExchangeAuthTokenForUserProfileInput = {
  identityProviderID: Scalars['String'];
};

export type ExchangePublicTokenParams = {
  publicToken: Scalars['String'];
  userId: Scalars['ID'];
};

export type InstitutionInfo = {
  __typename?: 'InstitutionInfo';
  institutionId: Scalars['String'];
  name: Scalars['String'];
};

export type LinkTokenHost = {
  __typename?: 'LinkTokenHost';
  linkToken: Scalars['String'];
};

export type Merchant = Node & {
  __typename?: 'Merchant';
  discountOffers?: Maybe<Array<DiscountOffer>>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

/**
 * MerchantWhereInput is used for filtering Merchant objects.
 * Input was generated by ent.
 */
export type MerchantWhereInput = {
  and?: InputMaybe<Array<MerchantWhereInput>>;
  /** discount_offers edge predicates */
  hasDiscountOffers?: InputMaybe<Scalars['Boolean']>;
  hasDiscountOffersWith?: InputMaybe<Array<DiscountOfferWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>;
  nameContains?: InputMaybe<Scalars['String']>;
  nameContainsFold?: InputMaybe<Scalars['String']>;
  nameEqualFold?: InputMaybe<Scalars['String']>;
  nameGT?: InputMaybe<Scalars['String']>;
  nameGTE?: InputMaybe<Scalars['String']>;
  nameHasPrefix?: InputMaybe<Scalars['String']>;
  nameHasSuffix?: InputMaybe<Scalars['String']>;
  nameIn?: InputMaybe<Array<Scalars['String']>>;
  nameLT?: InputMaybe<Scalars['String']>;
  nameLTE?: InputMaybe<Scalars['String']>;
  nameNEQ?: InputMaybe<Scalars['String']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<MerchantWhereInput>;
  or?: InputMaybe<Array<MerchantWhereInput>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createDiscountOffer: DiscountOffer;
  createLinkToken: LinkTokenHost;
  createMerchant: Merchant;
  exchangeAuthTokenForUserProfile: User;
  exchangePublicToken: Scalars['String'];
  markNotificationsAsCheckedInApp: Scalars['Boolean'];
  setNotificationChannels: User;
  setOfferFrequency: User;
  setSpendingCategories: User;
  updateUser: User;
};


export type MutationCreateDiscountOfferArgs = {
  input: CreateDiscountOfferInput;
};


export type MutationCreateLinkTokenArgs = {
  input: CreateLinkTokenParams;
};


export type MutationCreateMerchantArgs = {
  input: CreateMerchantInput;
};


export type MutationExchangeAuthTokenForUserProfileArgs = {
  input: ExchangeAuthTokenForUserProfileInput;
};


export type MutationExchangePublicTokenArgs = {
  input: ExchangePublicTokenParams;
};


export type MutationMarkNotificationsAsCheckedInAppArgs = {
  ids: Array<Scalars['ID']>;
};


export type MutationSetNotificationChannelsArgs = {
  notificationChannel: Array<UserNotificationChannelPreferencesChanel>;
  userID: Scalars['ID'];
};


export type MutationSetOfferFrequencyArgs = {
  frequency: UserOfferFrequency;
  userID: Scalars['ID'];
};


export type MutationSetSpendingCategoriesArgs = {
  spendingCategoryIDs: Array<Scalars['ID']>;
  userID: Scalars['ID'];
};


export type MutationUpdateUserArgs = {
  id: Scalars['ID'];
  input?: InputMaybe<UpdateUserInput>;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
};

export type Notification = Node & {
  __typename?: 'Notification';
  checkedInApp: Scalars['Boolean'];
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  includedInAggregatedOfferAt?: Maybe<Scalars['Time']>;
  notificationDiscountOffer?: Maybe<DiscountOffer>;
  notificationRecipient: User;
  type: NotificationType;
};

/** A connection to a list of items. */
export type NotificationConnection = {
  __typename?: 'NotificationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NotificationEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type NotificationEdge = {
  __typename?: 'NotificationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<Notification>;
};

/** Ordering options for Notification connections */
export type NotificationOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Notifications. */
  field: NotificationOrderField;
};

/** Properties by which Notification connections can be ordered. */
export enum NotificationOrderField {
  CreatedAt = 'CREATED_AT'
}

/** NotificationType is enum for the field type */
export enum NotificationType {
  Insights = 'INSIGHTS',
  Offer = 'OFFER'
}

/**
 * NotificationWhereInput is used for filtering Notification objects.
 * Input was generated by ent.
 */
export type NotificationWhereInput = {
  and?: InputMaybe<Array<NotificationWhereInput>>;
  /** checked_in_app field predicates */
  checkedInApp?: InputMaybe<Scalars['Boolean']>;
  checkedInAppNEQ?: InputMaybe<Scalars['Boolean']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** notification_discount_offer edge predicates */
  hasNotificationDiscountOffer?: InputMaybe<Scalars['Boolean']>;
  hasNotificationDiscountOfferWith?: InputMaybe<Array<DiscountOfferWhereInput>>;
  /** notification_recipient edge predicates */
  hasNotificationRecipient?: InputMaybe<Scalars['Boolean']>;
  hasNotificationRecipientWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** included_in_aggregated_offer_at field predicates */
  includedInAggregatedOfferAt?: InputMaybe<Scalars['Time']>;
  includedInAggregatedOfferAtGT?: InputMaybe<Scalars['Time']>;
  includedInAggregatedOfferAtGTE?: InputMaybe<Scalars['Time']>;
  includedInAggregatedOfferAtIn?: InputMaybe<Array<Scalars['Time']>>;
  includedInAggregatedOfferAtIsNil?: InputMaybe<Scalars['Boolean']>;
  includedInAggregatedOfferAtLT?: InputMaybe<Scalars['Time']>;
  includedInAggregatedOfferAtLTE?: InputMaybe<Scalars['Time']>;
  includedInAggregatedOfferAtNEQ?: InputMaybe<Scalars['Time']>;
  includedInAggregatedOfferAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  includedInAggregatedOfferAtNotNil?: InputMaybe<Scalars['Boolean']>;
  not?: InputMaybe<NotificationWhereInput>;
  or?: InputMaybe<Array<NotificationWhereInput>>;
  /** type field predicates */
  type?: InputMaybe<NotificationType>;
  typeIn?: InputMaybe<Array<NotificationType>>;
  typeNEQ?: InputMaybe<NotificationType>;
  typeNotIn?: InputMaybe<Array<NotificationType>>;
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type PlaidAccountBalances = {
  __typename?: 'PlaidAccountBalances';
  available: Scalars['Float'];
  current: Scalars['Float'];
  isoCurrencyCode: Scalars['String'];
};

export type PlaidAccountInfo = {
  __typename?: 'PlaidAccountInfo';
  accountId: Scalars['String'];
  balances: PlaidAccountBalances;
  mask: Scalars['String'];
  name: Scalars['String'];
  officialName: Scalars['String'];
  transactions: TransactionConnection;
  type: Scalars['String'];
};


export type PlaidAccountInfoTransactionsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TransactionOrder>;
  where?: InputMaybe<TransactionWhereInput>;
};

export type PlaidInstitution = Node & {
  __typename?: 'PlaidInstitution';
  accounts?: Maybe<Array<PlaidInstitutionAccount>>;
  id: Scalars['ID'];
  institutionID: Scalars['String'];
  name: Scalars['String'];
  plaidItem?: Maybe<PlaidItem>;
};

export type PlaidInstitutionAccount = Node & {
  __typename?: 'PlaidInstitutionAccount';
  accountID: Scalars['String'];
  balanceAvailable: Scalars['Float'];
  balanceCurrent: Scalars['Float'];
  balanceIsoCurrencyCode: Scalars['String'];
  id: Scalars['ID'];
  mask: Scalars['String'];
  name: Scalars['String'];
  officialName?: Maybe<Scalars['String']>;
  parentInstitution?: Maybe<PlaidInstitution>;
  transactions: TransactionConnection;
  type: Scalars['String'];
};


export type PlaidInstitutionAccountTransactionsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TransactionOrder>;
  where?: InputMaybe<TransactionWhereInput>;
};

/** A connection to a list of items. */
export type PlaidInstitutionAccountConnection = {
  __typename?: 'PlaidInstitutionAccountConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlaidInstitutionAccountEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PlaidInstitutionAccountEdge = {
  __typename?: 'PlaidInstitutionAccountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<PlaidInstitutionAccount>;
};

/**
 * PlaidInstitutionAccountWhereInput is used for filtering PlaidInstitutionAccount objects.
 * Input was generated by ent.
 */
export type PlaidInstitutionAccountWhereInput = {
  /** account_id field predicates */
  accountID?: InputMaybe<Scalars['String']>;
  accountIDContains?: InputMaybe<Scalars['String']>;
  accountIDContainsFold?: InputMaybe<Scalars['String']>;
  accountIDEqualFold?: InputMaybe<Scalars['String']>;
  accountIDGT?: InputMaybe<Scalars['String']>;
  accountIDGTE?: InputMaybe<Scalars['String']>;
  accountIDHasPrefix?: InputMaybe<Scalars['String']>;
  accountIDHasSuffix?: InputMaybe<Scalars['String']>;
  accountIDIn?: InputMaybe<Array<Scalars['String']>>;
  accountIDLT?: InputMaybe<Scalars['String']>;
  accountIDLTE?: InputMaybe<Scalars['String']>;
  accountIDNEQ?: InputMaybe<Scalars['String']>;
  accountIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<PlaidInstitutionAccountWhereInput>>;
  /** balance_available field predicates */
  balanceAvailable?: InputMaybe<Scalars['Float']>;
  balanceAvailableGT?: InputMaybe<Scalars['Float']>;
  balanceAvailableGTE?: InputMaybe<Scalars['Float']>;
  balanceAvailableIn?: InputMaybe<Array<Scalars['Float']>>;
  balanceAvailableLT?: InputMaybe<Scalars['Float']>;
  balanceAvailableLTE?: InputMaybe<Scalars['Float']>;
  balanceAvailableNEQ?: InputMaybe<Scalars['Float']>;
  balanceAvailableNotIn?: InputMaybe<Array<Scalars['Float']>>;
  /** balance_current field predicates */
  balanceCurrent?: InputMaybe<Scalars['Float']>;
  balanceCurrentGT?: InputMaybe<Scalars['Float']>;
  balanceCurrentGTE?: InputMaybe<Scalars['Float']>;
  balanceCurrentIn?: InputMaybe<Array<Scalars['Float']>>;
  balanceCurrentLT?: InputMaybe<Scalars['Float']>;
  balanceCurrentLTE?: InputMaybe<Scalars['Float']>;
  balanceCurrentNEQ?: InputMaybe<Scalars['Float']>;
  balanceCurrentNotIn?: InputMaybe<Array<Scalars['Float']>>;
  /** balance_iso_currency_code field predicates */
  balanceIsoCurrencyCode?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeContains?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeContainsFold?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeEqualFold?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeGT?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeGTE?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeHasPrefix?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeHasSuffix?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeIn?: InputMaybe<Array<Scalars['String']>>;
  balanceIsoCurrencyCodeLT?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeLTE?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeNEQ?: InputMaybe<Scalars['String']>;
  balanceIsoCurrencyCodeNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** parent_institution edge predicates */
  hasParentInstitution?: InputMaybe<Scalars['Boolean']>;
  hasParentInstitutionWith?: InputMaybe<Array<PlaidInstitutionWhereInput>>;
  /** transactions edge predicates */
  hasTransactions?: InputMaybe<Scalars['Boolean']>;
  hasTransactionsWith?: InputMaybe<Array<TransactionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** mask field predicates */
  mask?: InputMaybe<Scalars['String']>;
  maskContains?: InputMaybe<Scalars['String']>;
  maskContainsFold?: InputMaybe<Scalars['String']>;
  maskEqualFold?: InputMaybe<Scalars['String']>;
  maskGT?: InputMaybe<Scalars['String']>;
  maskGTE?: InputMaybe<Scalars['String']>;
  maskHasPrefix?: InputMaybe<Scalars['String']>;
  maskHasSuffix?: InputMaybe<Scalars['String']>;
  maskIn?: InputMaybe<Array<Scalars['String']>>;
  maskLT?: InputMaybe<Scalars['String']>;
  maskLTE?: InputMaybe<Scalars['String']>;
  maskNEQ?: InputMaybe<Scalars['String']>;
  maskNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>;
  nameContains?: InputMaybe<Scalars['String']>;
  nameContainsFold?: InputMaybe<Scalars['String']>;
  nameEqualFold?: InputMaybe<Scalars['String']>;
  nameGT?: InputMaybe<Scalars['String']>;
  nameGTE?: InputMaybe<Scalars['String']>;
  nameHasPrefix?: InputMaybe<Scalars['String']>;
  nameHasSuffix?: InputMaybe<Scalars['String']>;
  nameIn?: InputMaybe<Array<Scalars['String']>>;
  nameLT?: InputMaybe<Scalars['String']>;
  nameLTE?: InputMaybe<Scalars['String']>;
  nameNEQ?: InputMaybe<Scalars['String']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<PlaidInstitutionAccountWhereInput>;
  /** official_name field predicates */
  officialName?: InputMaybe<Scalars['String']>;
  officialNameContains?: InputMaybe<Scalars['String']>;
  officialNameContainsFold?: InputMaybe<Scalars['String']>;
  officialNameEqualFold?: InputMaybe<Scalars['String']>;
  officialNameGT?: InputMaybe<Scalars['String']>;
  officialNameGTE?: InputMaybe<Scalars['String']>;
  officialNameHasPrefix?: InputMaybe<Scalars['String']>;
  officialNameHasSuffix?: InputMaybe<Scalars['String']>;
  officialNameIn?: InputMaybe<Array<Scalars['String']>>;
  officialNameIsNil?: InputMaybe<Scalars['Boolean']>;
  officialNameLT?: InputMaybe<Scalars['String']>;
  officialNameLTE?: InputMaybe<Scalars['String']>;
  officialNameNEQ?: InputMaybe<Scalars['String']>;
  officialNameNotIn?: InputMaybe<Array<Scalars['String']>>;
  officialNameNotNil?: InputMaybe<Scalars['Boolean']>;
  or?: InputMaybe<Array<PlaidInstitutionAccountWhereInput>>;
  /** type field predicates */
  type?: InputMaybe<Scalars['String']>;
  typeContains?: InputMaybe<Scalars['String']>;
  typeContainsFold?: InputMaybe<Scalars['String']>;
  typeEqualFold?: InputMaybe<Scalars['String']>;
  typeGT?: InputMaybe<Scalars['String']>;
  typeGTE?: InputMaybe<Scalars['String']>;
  typeHasPrefix?: InputMaybe<Scalars['String']>;
  typeHasSuffix?: InputMaybe<Scalars['String']>;
  typeIn?: InputMaybe<Array<Scalars['String']>>;
  typeLT?: InputMaybe<Scalars['String']>;
  typeLTE?: InputMaybe<Scalars['String']>;
  typeNEQ?: InputMaybe<Scalars['String']>;
  typeNotIn?: InputMaybe<Array<Scalars['String']>>;
};

/** A connection to a list of items. */
export type PlaidInstitutionConnection = {
  __typename?: 'PlaidInstitutionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlaidInstitutionEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PlaidInstitutionEdge = {
  __typename?: 'PlaidInstitutionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<PlaidInstitution>;
};

/**
 * PlaidInstitutionWhereInput is used for filtering PlaidInstitution objects.
 * Input was generated by ent.
 */
export type PlaidInstitutionWhereInput = {
  and?: InputMaybe<Array<PlaidInstitutionWhereInput>>;
  /** accounts edge predicates */
  hasAccounts?: InputMaybe<Scalars['Boolean']>;
  hasAccountsWith?: InputMaybe<Array<PlaidInstitutionAccountWhereInput>>;
  /** plaid_item edge predicates */
  hasPlaidItem?: InputMaybe<Scalars['Boolean']>;
  hasPlaidItemWith?: InputMaybe<Array<PlaidItemWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** institution_id field predicates */
  institutionID?: InputMaybe<Scalars['String']>;
  institutionIDContains?: InputMaybe<Scalars['String']>;
  institutionIDContainsFold?: InputMaybe<Scalars['String']>;
  institutionIDEqualFold?: InputMaybe<Scalars['String']>;
  institutionIDGT?: InputMaybe<Scalars['String']>;
  institutionIDGTE?: InputMaybe<Scalars['String']>;
  institutionIDHasPrefix?: InputMaybe<Scalars['String']>;
  institutionIDHasSuffix?: InputMaybe<Scalars['String']>;
  institutionIDIn?: InputMaybe<Array<Scalars['String']>>;
  institutionIDLT?: InputMaybe<Scalars['String']>;
  institutionIDLTE?: InputMaybe<Scalars['String']>;
  institutionIDNEQ?: InputMaybe<Scalars['String']>;
  institutionIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>;
  nameContains?: InputMaybe<Scalars['String']>;
  nameContainsFold?: InputMaybe<Scalars['String']>;
  nameEqualFold?: InputMaybe<Scalars['String']>;
  nameGT?: InputMaybe<Scalars['String']>;
  nameGTE?: InputMaybe<Scalars['String']>;
  nameHasPrefix?: InputMaybe<Scalars['String']>;
  nameHasSuffix?: InputMaybe<Scalars['String']>;
  nameIn?: InputMaybe<Array<Scalars['String']>>;
  nameLT?: InputMaybe<Scalars['String']>;
  nameLTE?: InputMaybe<Scalars['String']>;
  nameNEQ?: InputMaybe<Scalars['String']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<PlaidInstitutionWhereInput>;
  or?: InputMaybe<Array<PlaidInstitutionWhereInput>>;
};

export type PlaidItem = Node & {
  __typename?: 'PlaidItem';
  accessToken: Scalars['String'];
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  institution?: Maybe<PlaidInstitution>;
  itemID: Scalars['String'];
  owner?: Maybe<User>;
  transactionSyncs?: Maybe<Array<TransactionSync>>;
  updatedAt: Scalars['Time'];
};

/** A connection to a list of items. */
export type PlaidItemConnection = {
  __typename?: 'PlaidItemConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlaidItemEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PlaidItemEdge = {
  __typename?: 'PlaidItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<PlaidItem>;
};

/** Ordering options for PlaidItem connections */
export type PlaidItemOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order PlaidItems. */
  field: PlaidItemOrderField;
};

/** Properties by which PlaidItem connections can be ordered. */
export enum PlaidItemOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * PlaidItemWhereInput is used for filtering PlaidItem objects.
 * Input was generated by ent.
 */
export type PlaidItemWhereInput = {
  /** access_token field predicates */
  accessToken?: InputMaybe<Scalars['String']>;
  accessTokenContains?: InputMaybe<Scalars['String']>;
  accessTokenContainsFold?: InputMaybe<Scalars['String']>;
  accessTokenEqualFold?: InputMaybe<Scalars['String']>;
  accessTokenGT?: InputMaybe<Scalars['String']>;
  accessTokenGTE?: InputMaybe<Scalars['String']>;
  accessTokenHasPrefix?: InputMaybe<Scalars['String']>;
  accessTokenHasSuffix?: InputMaybe<Scalars['String']>;
  accessTokenIn?: InputMaybe<Array<Scalars['String']>>;
  accessTokenLT?: InputMaybe<Scalars['String']>;
  accessTokenLTE?: InputMaybe<Scalars['String']>;
  accessTokenNEQ?: InputMaybe<Scalars['String']>;
  accessTokenNotIn?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<PlaidItemWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** institution edge predicates */
  hasInstitution?: InputMaybe<Scalars['Boolean']>;
  hasInstitutionWith?: InputMaybe<Array<PlaidInstitutionWhereInput>>;
  /** owner edge predicates */
  hasOwner?: InputMaybe<Scalars['Boolean']>;
  hasOwnerWith?: InputMaybe<Array<UserWhereInput>>;
  /** transaction_syncs edge predicates */
  hasTransactionSyncs?: InputMaybe<Scalars['Boolean']>;
  hasTransactionSyncsWith?: InputMaybe<Array<TransactionSyncWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** item_id field predicates */
  itemID?: InputMaybe<Scalars['String']>;
  itemIDContains?: InputMaybe<Scalars['String']>;
  itemIDContainsFold?: InputMaybe<Scalars['String']>;
  itemIDEqualFold?: InputMaybe<Scalars['String']>;
  itemIDGT?: InputMaybe<Scalars['String']>;
  itemIDGTE?: InputMaybe<Scalars['String']>;
  itemIDHasPrefix?: InputMaybe<Scalars['String']>;
  itemIDHasSuffix?: InputMaybe<Scalars['String']>;
  itemIDIn?: InputMaybe<Array<Scalars['String']>>;
  itemIDLT?: InputMaybe<Scalars['String']>;
  itemIDLTE?: InputMaybe<Scalars['String']>;
  itemIDNEQ?: InputMaybe<Scalars['String']>;
  itemIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<PlaidItemWhereInput>;
  or?: InputMaybe<Array<PlaidItemWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>;
  updatedAtGT?: InputMaybe<Scalars['Time']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
};

export type Query = {
  __typename?: 'Query';
  discountOffers: DiscountOfferConnection;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  notificationChannels: UserNotificationChannelPreferencesConnection;
  notifications: NotificationConnection;
  plaidInstitutionAccounts?: Maybe<PlaidInstitutionAccountConnection>;
  plaidInstitutions?: Maybe<PlaidInstitutionConnection>;
  plaidItems: PlaidItemConnection;
  spendingCategories: SpendingCategoryConnection;
  transactions: TransactionConnection;
};


export type QueryDiscountOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DiscountOfferOrder>;
  where?: InputMaybe<DiscountOfferWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']>;
};


export type QueryNotificationChannelsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserNotificationChannelPreferencesWhereInput>;
};


export type QueryNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NotificationOrder>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type QueryPlaidInstitutionAccountsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PlaidInstitutionAccountWhereInput>;
};


export type QueryPlaidInstitutionsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PlaidInstitutionWhereInput>;
};


export type QueryPlaidItemsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PlaidItemWhereInput>;
};


export type QuerySpendingCategoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SpendingCategoryWhereInput>;
};


export type QueryTransactionsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TransactionOrder>;
  where?: InputMaybe<TransactionWhereInput>;
};

export type SpendingCategory = Node & {
  __typename?: 'SpendingCategory';
  categoryID: Scalars['String'];
  categoryTransactions?: Maybe<Array<Transaction>>;
  createdAt: Scalars['Time'];
  id: Scalars['ID'];
  interestedUsers?: Maybe<Array<User>>;
  name: Scalars['String'];
};

/** A connection to a list of items. */
export type SpendingCategoryConnection = {
  __typename?: 'SpendingCategoryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SpendingCategoryEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SpendingCategoryEdge = {
  __typename?: 'SpendingCategoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<SpendingCategory>;
};

/**
 * SpendingCategoryWhereInput is used for filtering SpendingCategory objects.
 * Input was generated by ent.
 */
export type SpendingCategoryWhereInput = {
  and?: InputMaybe<Array<SpendingCategoryWhereInput>>;
  /** category_id field predicates */
  categoryID?: InputMaybe<Scalars['String']>;
  categoryIDContains?: InputMaybe<Scalars['String']>;
  categoryIDContainsFold?: InputMaybe<Scalars['String']>;
  categoryIDEqualFold?: InputMaybe<Scalars['String']>;
  categoryIDGT?: InputMaybe<Scalars['String']>;
  categoryIDGTE?: InputMaybe<Scalars['String']>;
  categoryIDHasPrefix?: InputMaybe<Scalars['String']>;
  categoryIDHasSuffix?: InputMaybe<Scalars['String']>;
  categoryIDIn?: InputMaybe<Array<Scalars['String']>>;
  categoryIDLT?: InputMaybe<Scalars['String']>;
  categoryIDLTE?: InputMaybe<Scalars['String']>;
  categoryIDNEQ?: InputMaybe<Scalars['String']>;
  categoryIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** category_transactions edge predicates */
  hasCategoryTransactions?: InputMaybe<Scalars['Boolean']>;
  hasCategoryTransactionsWith?: InputMaybe<Array<TransactionWhereInput>>;
  /** interested_users edge predicates */
  hasInterestedUsers?: InputMaybe<Scalars['Boolean']>;
  hasInterestedUsersWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>;
  nameContains?: InputMaybe<Scalars['String']>;
  nameContainsFold?: InputMaybe<Scalars['String']>;
  nameEqualFold?: InputMaybe<Scalars['String']>;
  nameGT?: InputMaybe<Scalars['String']>;
  nameGTE?: InputMaybe<Scalars['String']>;
  nameHasPrefix?: InputMaybe<Scalars['String']>;
  nameHasSuffix?: InputMaybe<Scalars['String']>;
  nameIn?: InputMaybe<Array<Scalars['String']>>;
  nameLT?: InputMaybe<Scalars['String']>;
  nameLTE?: InputMaybe<Scalars['String']>;
  nameNEQ?: InputMaybe<Scalars['String']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<SpendingCategoryWhereInput>;
  or?: InputMaybe<Array<SpendingCategoryWhereInput>>;
};

export type Subscription = {
  __typename?: 'Subscription';
  notification: Notification;
};


export type SubscriptionNotificationArgs = {
  ownerID: Scalars['ID'];
};

export type Transaction = Node & {
  __typename?: 'Transaction';
  accountOwner: Scalars['String'];
  amount: Scalars['Float'];
  authorizedDate?: Maybe<Scalars['String']>;
  authorizedDatetime?: Maybe<Scalars['Time']>;
  category?: Maybe<Scalars['String']>;
  categoryID?: Maybe<Scalars['String']>;
  checkNumber: Scalars['String'];
  createdAt: Scalars['Time'];
  date: Scalars['String'];
  datetime?: Maybe<Scalars['Time']>;
  financialAccountID: Scalars['String'];
  id: Scalars['ID'];
  institutionAccount?: Maybe<PlaidInstitutionAccount>;
  isoCurrencyCode: Scalars['String'];
  locationAddress: Scalars['String'];
  locationCity: Scalars['String'];
  locationLat: Scalars['Float'];
  locationLon: Scalars['Float'];
  locationPostalCode: Scalars['String'];
  locationRegion: Scalars['String'];
  locationStoreNumber: Scalars['String'];
  merchantName: Scalars['String'];
  name: Scalars['String'];
  paymentChannel: Scalars['String'];
  pending: Scalars['Boolean'];
  pendingTransactionID: Scalars['String'];
  transactionCategories?: Maybe<Array<SpendingCategory>>;
  transactionCode: Scalars['String'];
  transactionID: Scalars['String'];
  unofficialCurrencyCode: Scalars['String'];
};

/** A connection to a list of items. */
export type TransactionConnection = {
  __typename?: 'TransactionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransactionEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TransactionEdge = {
  __typename?: 'TransactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<Transaction>;
};

/** Ordering options for Transaction connections */
export type TransactionOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Transactions. */
  field: TransactionOrderField;
};

/** Properties by which Transaction connections can be ordered. */
export enum TransactionOrderField {
  Date = 'DATE',
  Datetime = 'DATETIME'
}

export type TransactionSync = Node & {
  __typename?: 'TransactionSync';
  createdAt: Scalars['Time'];
  cursor: Scalars['String'];
  id: Scalars['ID'];
  item?: Maybe<PlaidItem>;
};

/**
 * TransactionSyncWhereInput is used for filtering TransactionSync objects.
 * Input was generated by ent.
 */
export type TransactionSyncWhereInput = {
  and?: InputMaybe<Array<TransactionSyncWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** cursor field predicates */
  cursor?: InputMaybe<Scalars['String']>;
  cursorContains?: InputMaybe<Scalars['String']>;
  cursorContainsFold?: InputMaybe<Scalars['String']>;
  cursorEqualFold?: InputMaybe<Scalars['String']>;
  cursorGT?: InputMaybe<Scalars['String']>;
  cursorGTE?: InputMaybe<Scalars['String']>;
  cursorHasPrefix?: InputMaybe<Scalars['String']>;
  cursorHasSuffix?: InputMaybe<Scalars['String']>;
  cursorIn?: InputMaybe<Array<Scalars['String']>>;
  cursorLT?: InputMaybe<Scalars['String']>;
  cursorLTE?: InputMaybe<Scalars['String']>;
  cursorNEQ?: InputMaybe<Scalars['String']>;
  cursorNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** item edge predicates */
  hasItem?: InputMaybe<Scalars['Boolean']>;
  hasItemWith?: InputMaybe<Array<PlaidItemWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<TransactionSyncWhereInput>;
  or?: InputMaybe<Array<TransactionSyncWhereInput>>;
};

/**
 * TransactionWhereInput is used for filtering Transaction objects.
 * Input was generated by ent.
 */
export type TransactionWhereInput = {
  /** account_owner field predicates */
  accountOwner?: InputMaybe<Scalars['String']>;
  accountOwnerContains?: InputMaybe<Scalars['String']>;
  accountOwnerContainsFold?: InputMaybe<Scalars['String']>;
  accountOwnerEqualFold?: InputMaybe<Scalars['String']>;
  accountOwnerGT?: InputMaybe<Scalars['String']>;
  accountOwnerGTE?: InputMaybe<Scalars['String']>;
  accountOwnerHasPrefix?: InputMaybe<Scalars['String']>;
  accountOwnerHasSuffix?: InputMaybe<Scalars['String']>;
  accountOwnerIn?: InputMaybe<Array<Scalars['String']>>;
  accountOwnerLT?: InputMaybe<Scalars['String']>;
  accountOwnerLTE?: InputMaybe<Scalars['String']>;
  accountOwnerNEQ?: InputMaybe<Scalars['String']>;
  accountOwnerNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** amount field predicates */
  amount?: InputMaybe<Scalars['Float']>;
  amountGT?: InputMaybe<Scalars['Float']>;
  amountGTE?: InputMaybe<Scalars['Float']>;
  amountIn?: InputMaybe<Array<Scalars['Float']>>;
  amountLT?: InputMaybe<Scalars['Float']>;
  amountLTE?: InputMaybe<Scalars['Float']>;
  amountNEQ?: InputMaybe<Scalars['Float']>;
  amountNotIn?: InputMaybe<Array<Scalars['Float']>>;
  and?: InputMaybe<Array<TransactionWhereInput>>;
  /** authorized_date field predicates */
  authorizedDate?: InputMaybe<Scalars['String']>;
  authorizedDateContains?: InputMaybe<Scalars['String']>;
  authorizedDateContainsFold?: InputMaybe<Scalars['String']>;
  authorizedDateEqualFold?: InputMaybe<Scalars['String']>;
  authorizedDateGT?: InputMaybe<Scalars['String']>;
  authorizedDateGTE?: InputMaybe<Scalars['String']>;
  authorizedDateHasPrefix?: InputMaybe<Scalars['String']>;
  authorizedDateHasSuffix?: InputMaybe<Scalars['String']>;
  authorizedDateIn?: InputMaybe<Array<Scalars['String']>>;
  authorizedDateIsNil?: InputMaybe<Scalars['Boolean']>;
  authorizedDateLT?: InputMaybe<Scalars['String']>;
  authorizedDateLTE?: InputMaybe<Scalars['String']>;
  authorizedDateNEQ?: InputMaybe<Scalars['String']>;
  authorizedDateNotIn?: InputMaybe<Array<Scalars['String']>>;
  authorizedDateNotNil?: InputMaybe<Scalars['Boolean']>;
  /** authorized_datetime field predicates */
  authorizedDatetime?: InputMaybe<Scalars['Time']>;
  authorizedDatetimeGT?: InputMaybe<Scalars['Time']>;
  authorizedDatetimeGTE?: InputMaybe<Scalars['Time']>;
  authorizedDatetimeIn?: InputMaybe<Array<Scalars['Time']>>;
  authorizedDatetimeIsNil?: InputMaybe<Scalars['Boolean']>;
  authorizedDatetimeLT?: InputMaybe<Scalars['Time']>;
  authorizedDatetimeLTE?: InputMaybe<Scalars['Time']>;
  authorizedDatetimeNEQ?: InputMaybe<Scalars['Time']>;
  authorizedDatetimeNotIn?: InputMaybe<Array<Scalars['Time']>>;
  authorizedDatetimeNotNil?: InputMaybe<Scalars['Boolean']>;
  /** category field predicates */
  category?: InputMaybe<Scalars['String']>;
  categoryContains?: InputMaybe<Scalars['String']>;
  categoryContainsFold?: InputMaybe<Scalars['String']>;
  categoryEqualFold?: InputMaybe<Scalars['String']>;
  categoryGT?: InputMaybe<Scalars['String']>;
  categoryGTE?: InputMaybe<Scalars['String']>;
  categoryHasPrefix?: InputMaybe<Scalars['String']>;
  categoryHasSuffix?: InputMaybe<Scalars['String']>;
  /** category_id field predicates */
  categoryID?: InputMaybe<Scalars['String']>;
  categoryIDContains?: InputMaybe<Scalars['String']>;
  categoryIDContainsFold?: InputMaybe<Scalars['String']>;
  categoryIDEqualFold?: InputMaybe<Scalars['String']>;
  categoryIDGT?: InputMaybe<Scalars['String']>;
  categoryIDGTE?: InputMaybe<Scalars['String']>;
  categoryIDHasPrefix?: InputMaybe<Scalars['String']>;
  categoryIDHasSuffix?: InputMaybe<Scalars['String']>;
  categoryIDIn?: InputMaybe<Array<Scalars['String']>>;
  categoryIDIsNil?: InputMaybe<Scalars['Boolean']>;
  categoryIDLT?: InputMaybe<Scalars['String']>;
  categoryIDLTE?: InputMaybe<Scalars['String']>;
  categoryIDNEQ?: InputMaybe<Scalars['String']>;
  categoryIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  categoryIDNotNil?: InputMaybe<Scalars['Boolean']>;
  categoryIn?: InputMaybe<Array<Scalars['String']>>;
  categoryIsNil?: InputMaybe<Scalars['Boolean']>;
  categoryLT?: InputMaybe<Scalars['String']>;
  categoryLTE?: InputMaybe<Scalars['String']>;
  categoryNEQ?: InputMaybe<Scalars['String']>;
  categoryNotIn?: InputMaybe<Array<Scalars['String']>>;
  categoryNotNil?: InputMaybe<Scalars['Boolean']>;
  /** check_number field predicates */
  checkNumber?: InputMaybe<Scalars['String']>;
  checkNumberContains?: InputMaybe<Scalars['String']>;
  checkNumberContainsFold?: InputMaybe<Scalars['String']>;
  checkNumberEqualFold?: InputMaybe<Scalars['String']>;
  checkNumberGT?: InputMaybe<Scalars['String']>;
  checkNumberGTE?: InputMaybe<Scalars['String']>;
  checkNumberHasPrefix?: InputMaybe<Scalars['String']>;
  checkNumberHasSuffix?: InputMaybe<Scalars['String']>;
  checkNumberIn?: InputMaybe<Array<Scalars['String']>>;
  checkNumberLT?: InputMaybe<Scalars['String']>;
  checkNumberLTE?: InputMaybe<Scalars['String']>;
  checkNumberNEQ?: InputMaybe<Scalars['String']>;
  checkNumberNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>;
  createdAtGT?: InputMaybe<Scalars['Time']>;
  createdAtGTE?: InputMaybe<Scalars['Time']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>;
  createdAtLT?: InputMaybe<Scalars['Time']>;
  createdAtLTE?: InputMaybe<Scalars['Time']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>;
  /** date field predicates */
  date?: InputMaybe<Scalars['String']>;
  dateContains?: InputMaybe<Scalars['String']>;
  dateContainsFold?: InputMaybe<Scalars['String']>;
  dateEqualFold?: InputMaybe<Scalars['String']>;
  dateGT?: InputMaybe<Scalars['String']>;
  dateGTE?: InputMaybe<Scalars['String']>;
  dateHasPrefix?: InputMaybe<Scalars['String']>;
  dateHasSuffix?: InputMaybe<Scalars['String']>;
  dateIn?: InputMaybe<Array<Scalars['String']>>;
  dateLT?: InputMaybe<Scalars['String']>;
  dateLTE?: InputMaybe<Scalars['String']>;
  dateNEQ?: InputMaybe<Scalars['String']>;
  dateNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** datetime field predicates */
  datetime?: InputMaybe<Scalars['Time']>;
  datetimeGT?: InputMaybe<Scalars['Time']>;
  datetimeGTE?: InputMaybe<Scalars['Time']>;
  datetimeIn?: InputMaybe<Array<Scalars['Time']>>;
  datetimeIsNil?: InputMaybe<Scalars['Boolean']>;
  datetimeLT?: InputMaybe<Scalars['Time']>;
  datetimeLTE?: InputMaybe<Scalars['Time']>;
  datetimeNEQ?: InputMaybe<Scalars['Time']>;
  datetimeNotIn?: InputMaybe<Array<Scalars['Time']>>;
  datetimeNotNil?: InputMaybe<Scalars['Boolean']>;
  /** financial_account_id field predicates */
  financialAccountID?: InputMaybe<Scalars['String']>;
  financialAccountIDContains?: InputMaybe<Scalars['String']>;
  financialAccountIDContainsFold?: InputMaybe<Scalars['String']>;
  financialAccountIDEqualFold?: InputMaybe<Scalars['String']>;
  financialAccountIDGT?: InputMaybe<Scalars['String']>;
  financialAccountIDGTE?: InputMaybe<Scalars['String']>;
  financialAccountIDHasPrefix?: InputMaybe<Scalars['String']>;
  financialAccountIDHasSuffix?: InputMaybe<Scalars['String']>;
  financialAccountIDIn?: InputMaybe<Array<Scalars['String']>>;
  financialAccountIDLT?: InputMaybe<Scalars['String']>;
  financialAccountIDLTE?: InputMaybe<Scalars['String']>;
  financialAccountIDNEQ?: InputMaybe<Scalars['String']>;
  financialAccountIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** institution_account edge predicates */
  hasInstitutionAccount?: InputMaybe<Scalars['Boolean']>;
  hasInstitutionAccountWith?: InputMaybe<Array<PlaidInstitutionAccountWhereInput>>;
  /** transaction_categories edge predicates */
  hasTransactionCategories?: InputMaybe<Scalars['Boolean']>;
  hasTransactionCategoriesWith?: InputMaybe<Array<SpendingCategoryWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** iso_currency_code field predicates */
  isoCurrencyCode?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeContains?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeContainsFold?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeEqualFold?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeGT?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeGTE?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeHasPrefix?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeHasSuffix?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeIn?: InputMaybe<Array<Scalars['String']>>;
  isoCurrencyCodeLT?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeLTE?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeNEQ?: InputMaybe<Scalars['String']>;
  isoCurrencyCodeNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** location_address field predicates */
  locationAddress?: InputMaybe<Scalars['String']>;
  locationAddressContains?: InputMaybe<Scalars['String']>;
  locationAddressContainsFold?: InputMaybe<Scalars['String']>;
  locationAddressEqualFold?: InputMaybe<Scalars['String']>;
  locationAddressGT?: InputMaybe<Scalars['String']>;
  locationAddressGTE?: InputMaybe<Scalars['String']>;
  locationAddressHasPrefix?: InputMaybe<Scalars['String']>;
  locationAddressHasSuffix?: InputMaybe<Scalars['String']>;
  locationAddressIn?: InputMaybe<Array<Scalars['String']>>;
  locationAddressLT?: InputMaybe<Scalars['String']>;
  locationAddressLTE?: InputMaybe<Scalars['String']>;
  locationAddressNEQ?: InputMaybe<Scalars['String']>;
  locationAddressNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** location_city field predicates */
  locationCity?: InputMaybe<Scalars['String']>;
  locationCityContains?: InputMaybe<Scalars['String']>;
  locationCityContainsFold?: InputMaybe<Scalars['String']>;
  locationCityEqualFold?: InputMaybe<Scalars['String']>;
  locationCityGT?: InputMaybe<Scalars['String']>;
  locationCityGTE?: InputMaybe<Scalars['String']>;
  locationCityHasPrefix?: InputMaybe<Scalars['String']>;
  locationCityHasSuffix?: InputMaybe<Scalars['String']>;
  locationCityIn?: InputMaybe<Array<Scalars['String']>>;
  locationCityLT?: InputMaybe<Scalars['String']>;
  locationCityLTE?: InputMaybe<Scalars['String']>;
  locationCityNEQ?: InputMaybe<Scalars['String']>;
  locationCityNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** location_lat field predicates */
  locationLat?: InputMaybe<Scalars['Float']>;
  locationLatGT?: InputMaybe<Scalars['Float']>;
  locationLatGTE?: InputMaybe<Scalars['Float']>;
  locationLatIn?: InputMaybe<Array<Scalars['Float']>>;
  locationLatLT?: InputMaybe<Scalars['Float']>;
  locationLatLTE?: InputMaybe<Scalars['Float']>;
  locationLatNEQ?: InputMaybe<Scalars['Float']>;
  locationLatNotIn?: InputMaybe<Array<Scalars['Float']>>;
  /** location_lon field predicates */
  locationLon?: InputMaybe<Scalars['Float']>;
  locationLonGT?: InputMaybe<Scalars['Float']>;
  locationLonGTE?: InputMaybe<Scalars['Float']>;
  locationLonIn?: InputMaybe<Array<Scalars['Float']>>;
  locationLonLT?: InputMaybe<Scalars['Float']>;
  locationLonLTE?: InputMaybe<Scalars['Float']>;
  locationLonNEQ?: InputMaybe<Scalars['Float']>;
  locationLonNotIn?: InputMaybe<Array<Scalars['Float']>>;
  /** location_postal_code field predicates */
  locationPostalCode?: InputMaybe<Scalars['String']>;
  locationPostalCodeContains?: InputMaybe<Scalars['String']>;
  locationPostalCodeContainsFold?: InputMaybe<Scalars['String']>;
  locationPostalCodeEqualFold?: InputMaybe<Scalars['String']>;
  locationPostalCodeGT?: InputMaybe<Scalars['String']>;
  locationPostalCodeGTE?: InputMaybe<Scalars['String']>;
  locationPostalCodeHasPrefix?: InputMaybe<Scalars['String']>;
  locationPostalCodeHasSuffix?: InputMaybe<Scalars['String']>;
  locationPostalCodeIn?: InputMaybe<Array<Scalars['String']>>;
  locationPostalCodeLT?: InputMaybe<Scalars['String']>;
  locationPostalCodeLTE?: InputMaybe<Scalars['String']>;
  locationPostalCodeNEQ?: InputMaybe<Scalars['String']>;
  locationPostalCodeNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** location_region field predicates */
  locationRegion?: InputMaybe<Scalars['String']>;
  locationRegionContains?: InputMaybe<Scalars['String']>;
  locationRegionContainsFold?: InputMaybe<Scalars['String']>;
  locationRegionEqualFold?: InputMaybe<Scalars['String']>;
  locationRegionGT?: InputMaybe<Scalars['String']>;
  locationRegionGTE?: InputMaybe<Scalars['String']>;
  locationRegionHasPrefix?: InputMaybe<Scalars['String']>;
  locationRegionHasSuffix?: InputMaybe<Scalars['String']>;
  locationRegionIn?: InputMaybe<Array<Scalars['String']>>;
  locationRegionLT?: InputMaybe<Scalars['String']>;
  locationRegionLTE?: InputMaybe<Scalars['String']>;
  locationRegionNEQ?: InputMaybe<Scalars['String']>;
  locationRegionNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** location_store_number field predicates */
  locationStoreNumber?: InputMaybe<Scalars['String']>;
  locationStoreNumberContains?: InputMaybe<Scalars['String']>;
  locationStoreNumberContainsFold?: InputMaybe<Scalars['String']>;
  locationStoreNumberEqualFold?: InputMaybe<Scalars['String']>;
  locationStoreNumberGT?: InputMaybe<Scalars['String']>;
  locationStoreNumberGTE?: InputMaybe<Scalars['String']>;
  locationStoreNumberHasPrefix?: InputMaybe<Scalars['String']>;
  locationStoreNumberHasSuffix?: InputMaybe<Scalars['String']>;
  locationStoreNumberIn?: InputMaybe<Array<Scalars['String']>>;
  locationStoreNumberLT?: InputMaybe<Scalars['String']>;
  locationStoreNumberLTE?: InputMaybe<Scalars['String']>;
  locationStoreNumberNEQ?: InputMaybe<Scalars['String']>;
  locationStoreNumberNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** merchant_name field predicates */
  merchantName?: InputMaybe<Scalars['String']>;
  merchantNameContains?: InputMaybe<Scalars['String']>;
  merchantNameContainsFold?: InputMaybe<Scalars['String']>;
  merchantNameEqualFold?: InputMaybe<Scalars['String']>;
  merchantNameGT?: InputMaybe<Scalars['String']>;
  merchantNameGTE?: InputMaybe<Scalars['String']>;
  merchantNameHasPrefix?: InputMaybe<Scalars['String']>;
  merchantNameHasSuffix?: InputMaybe<Scalars['String']>;
  merchantNameIn?: InputMaybe<Array<Scalars['String']>>;
  merchantNameLT?: InputMaybe<Scalars['String']>;
  merchantNameLTE?: InputMaybe<Scalars['String']>;
  merchantNameNEQ?: InputMaybe<Scalars['String']>;
  merchantNameNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>;
  nameContains?: InputMaybe<Scalars['String']>;
  nameContainsFold?: InputMaybe<Scalars['String']>;
  nameEqualFold?: InputMaybe<Scalars['String']>;
  nameGT?: InputMaybe<Scalars['String']>;
  nameGTE?: InputMaybe<Scalars['String']>;
  nameHasPrefix?: InputMaybe<Scalars['String']>;
  nameHasSuffix?: InputMaybe<Scalars['String']>;
  nameIn?: InputMaybe<Array<Scalars['String']>>;
  nameLT?: InputMaybe<Scalars['String']>;
  nameLTE?: InputMaybe<Scalars['String']>;
  nameNEQ?: InputMaybe<Scalars['String']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']>>;
  not?: InputMaybe<TransactionWhereInput>;
  or?: InputMaybe<Array<TransactionWhereInput>>;
  /** payment_channel field predicates */
  paymentChannel?: InputMaybe<Scalars['String']>;
  paymentChannelContains?: InputMaybe<Scalars['String']>;
  paymentChannelContainsFold?: InputMaybe<Scalars['String']>;
  paymentChannelEqualFold?: InputMaybe<Scalars['String']>;
  paymentChannelGT?: InputMaybe<Scalars['String']>;
  paymentChannelGTE?: InputMaybe<Scalars['String']>;
  paymentChannelHasPrefix?: InputMaybe<Scalars['String']>;
  paymentChannelHasSuffix?: InputMaybe<Scalars['String']>;
  paymentChannelIn?: InputMaybe<Array<Scalars['String']>>;
  paymentChannelLT?: InputMaybe<Scalars['String']>;
  paymentChannelLTE?: InputMaybe<Scalars['String']>;
  paymentChannelNEQ?: InputMaybe<Scalars['String']>;
  paymentChannelNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** pending field predicates */
  pending?: InputMaybe<Scalars['Boolean']>;
  pendingNEQ?: InputMaybe<Scalars['Boolean']>;
  /** pending_transaction_id field predicates */
  pendingTransactionID?: InputMaybe<Scalars['String']>;
  pendingTransactionIDContains?: InputMaybe<Scalars['String']>;
  pendingTransactionIDContainsFold?: InputMaybe<Scalars['String']>;
  pendingTransactionIDEqualFold?: InputMaybe<Scalars['String']>;
  pendingTransactionIDGT?: InputMaybe<Scalars['String']>;
  pendingTransactionIDGTE?: InputMaybe<Scalars['String']>;
  pendingTransactionIDHasPrefix?: InputMaybe<Scalars['String']>;
  pendingTransactionIDHasSuffix?: InputMaybe<Scalars['String']>;
  pendingTransactionIDIn?: InputMaybe<Array<Scalars['String']>>;
  pendingTransactionIDLT?: InputMaybe<Scalars['String']>;
  pendingTransactionIDLTE?: InputMaybe<Scalars['String']>;
  pendingTransactionIDNEQ?: InputMaybe<Scalars['String']>;
  pendingTransactionIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** transaction_code field predicates */
  transactionCode?: InputMaybe<Scalars['String']>;
  transactionCodeContains?: InputMaybe<Scalars['String']>;
  transactionCodeContainsFold?: InputMaybe<Scalars['String']>;
  transactionCodeEqualFold?: InputMaybe<Scalars['String']>;
  transactionCodeGT?: InputMaybe<Scalars['String']>;
  transactionCodeGTE?: InputMaybe<Scalars['String']>;
  transactionCodeHasPrefix?: InputMaybe<Scalars['String']>;
  transactionCodeHasSuffix?: InputMaybe<Scalars['String']>;
  transactionCodeIn?: InputMaybe<Array<Scalars['String']>>;
  transactionCodeLT?: InputMaybe<Scalars['String']>;
  transactionCodeLTE?: InputMaybe<Scalars['String']>;
  transactionCodeNEQ?: InputMaybe<Scalars['String']>;
  transactionCodeNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** transaction_id field predicates */
  transactionID?: InputMaybe<Scalars['String']>;
  transactionIDContains?: InputMaybe<Scalars['String']>;
  transactionIDContainsFold?: InputMaybe<Scalars['String']>;
  transactionIDEqualFold?: InputMaybe<Scalars['String']>;
  transactionIDGT?: InputMaybe<Scalars['String']>;
  transactionIDGTE?: InputMaybe<Scalars['String']>;
  transactionIDHasPrefix?: InputMaybe<Scalars['String']>;
  transactionIDHasSuffix?: InputMaybe<Scalars['String']>;
  transactionIDIn?: InputMaybe<Array<Scalars['String']>>;
  transactionIDLT?: InputMaybe<Scalars['String']>;
  transactionIDLTE?: InputMaybe<Scalars['String']>;
  transactionIDNEQ?: InputMaybe<Scalars['String']>;
  transactionIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  /** unofficial_currency_code field predicates */
  unofficialCurrencyCode?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeContains?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeContainsFold?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeEqualFold?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeGT?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeGTE?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeHasPrefix?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeHasSuffix?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeIn?: InputMaybe<Array<Scalars['String']>>;
  unofficialCurrencyCodeLT?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeLTE?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeNEQ?: InputMaybe<Scalars['String']>;
  unofficialCurrencyCodeNotIn?: InputMaybe<Array<Scalars['String']>>;
};

/**
 * UpdateUserInput is used for update User object.
 * Input was generated by ent.
 */
export type UpdateUserInput = {
  clearHomeCity?: InputMaybe<Scalars['Boolean']>;
  clearHomeCountry?: InputMaybe<Scalars['Boolean']>;
  clearHomeState?: InputMaybe<Scalars['Boolean']>;
  homeCity?: InputMaybe<Scalars['String']>;
  homeCountry?: InputMaybe<Scalars['String']>;
  homeState?: InputMaybe<Scalars['String']>;
  offerFrequency?: InputMaybe<UserOfferFrequency>;
};

/**
 * UpdateUserNotificationChannelPreferencesInput is used for update UserNotificationChannelPreferences object.
 * Input was generated by ent.
 */
export type UpdateUserNotificationChannelPreferencesInput = {
  chanel?: InputMaybe<UserNotificationChannelPreferencesChanel>;
};

export type User = Node & {
  __typename?: 'User';
  availableDiscountOffers?: Maybe<Array<DiscountOffer>>;
  homeCity?: Maybe<Scalars['String']>;
  homeCountry?: Maybe<Scalars['String']>;
  homeState?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityProviderID?: Maybe<Scalars['String']>;
  notificationChannels?: Maybe<Array<UserNotificationChannelPreferences>>;
  notifications?: Maybe<Array<Notification>>;
  offerFrequency: UserOfferFrequency;
  plaidItems?: Maybe<Array<PlaidItem>>;
  spendingCategories?: Maybe<Array<SpendingCategory>>;
};

export type UserNotificationChannelPreferences = Node & {
  __typename?: 'UserNotificationChannelPreferences';
  chanel: UserNotificationChannelPreferencesChanel;
  chanelUsers?: Maybe<User>;
  id: Scalars['ID'];
};

/** UserNotificationChannelPreferencesChanel is enum for the field chanel */
export enum UserNotificationChannelPreferencesChanel {
  Email = 'EMAIL',
  Push = 'PUSH',
  Sms = 'SMS'
}

/** A connection to a list of items. */
export type UserNotificationChannelPreferencesConnection = {
  __typename?: 'UserNotificationChannelPreferencesConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserNotificationChannelPreferencesEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type UserNotificationChannelPreferencesEdge = {
  __typename?: 'UserNotificationChannelPreferencesEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor'];
  /** The item at the end of the edge. */
  node?: Maybe<UserNotificationChannelPreferences>;
};

/**
 * UserNotificationChannelPreferencesWhereInput is used for filtering UserNotificationChannelPreferences objects.
 * Input was generated by ent.
 */
export type UserNotificationChannelPreferencesWhereInput = {
  and?: InputMaybe<Array<UserNotificationChannelPreferencesWhereInput>>;
  /** chanel field predicates */
  chanel?: InputMaybe<UserNotificationChannelPreferencesChanel>;
  chanelIn?: InputMaybe<Array<UserNotificationChannelPreferencesChanel>>;
  chanelNEQ?: InputMaybe<UserNotificationChannelPreferencesChanel>;
  chanelNotIn?: InputMaybe<Array<UserNotificationChannelPreferencesChanel>>;
  /** chanel_users edge predicates */
  hasChanelUsers?: InputMaybe<Scalars['Boolean']>;
  hasChanelUsersWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  not?: InputMaybe<UserNotificationChannelPreferencesWhereInput>;
  or?: InputMaybe<Array<UserNotificationChannelPreferencesWhereInput>>;
};

/** UserOfferFrequency is enum for the field offer_frequency */
export enum UserOfferFrequency {
  AssSoonAsPossible = 'ASS_SOON_AS_POSSIBLE',
  BiWeekly = 'BI_WEEKLY',
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  NoOffers = 'NO_OFFERS',
  Weekly = 'WEEKLY'
}

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  and?: InputMaybe<Array<UserWhereInput>>;
  /** available_discount_offers edge predicates */
  hasAvailableDiscountOffers?: InputMaybe<Scalars['Boolean']>;
  hasAvailableDiscountOffersWith?: InputMaybe<Array<DiscountOfferWhereInput>>;
  /** notification_channels edge predicates */
  hasNotificationChannels?: InputMaybe<Scalars['Boolean']>;
  hasNotificationChannelsWith?: InputMaybe<Array<UserNotificationChannelPreferencesWhereInput>>;
  /** notifications edge predicates */
  hasNotifications?: InputMaybe<Scalars['Boolean']>;
  hasNotificationsWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** plaid_items edge predicates */
  hasPlaidItems?: InputMaybe<Scalars['Boolean']>;
  hasPlaidItemsWith?: InputMaybe<Array<PlaidItemWhereInput>>;
  /** spending_categories edge predicates */
  hasSpendingCategories?: InputMaybe<Scalars['Boolean']>;
  hasSpendingCategoriesWith?: InputMaybe<Array<SpendingCategoryWhereInput>>;
  /** home_city field predicates */
  homeCity?: InputMaybe<Scalars['String']>;
  homeCityContains?: InputMaybe<Scalars['String']>;
  homeCityContainsFold?: InputMaybe<Scalars['String']>;
  homeCityEqualFold?: InputMaybe<Scalars['String']>;
  homeCityGT?: InputMaybe<Scalars['String']>;
  homeCityGTE?: InputMaybe<Scalars['String']>;
  homeCityHasPrefix?: InputMaybe<Scalars['String']>;
  homeCityHasSuffix?: InputMaybe<Scalars['String']>;
  homeCityIn?: InputMaybe<Array<Scalars['String']>>;
  homeCityIsNil?: InputMaybe<Scalars['Boolean']>;
  homeCityLT?: InputMaybe<Scalars['String']>;
  homeCityLTE?: InputMaybe<Scalars['String']>;
  homeCityNEQ?: InputMaybe<Scalars['String']>;
  homeCityNotIn?: InputMaybe<Array<Scalars['String']>>;
  homeCityNotNil?: InputMaybe<Scalars['Boolean']>;
  /** home_country field predicates */
  homeCountry?: InputMaybe<Scalars['String']>;
  homeCountryContains?: InputMaybe<Scalars['String']>;
  homeCountryContainsFold?: InputMaybe<Scalars['String']>;
  homeCountryEqualFold?: InputMaybe<Scalars['String']>;
  homeCountryGT?: InputMaybe<Scalars['String']>;
  homeCountryGTE?: InputMaybe<Scalars['String']>;
  homeCountryHasPrefix?: InputMaybe<Scalars['String']>;
  homeCountryHasSuffix?: InputMaybe<Scalars['String']>;
  homeCountryIn?: InputMaybe<Array<Scalars['String']>>;
  homeCountryIsNil?: InputMaybe<Scalars['Boolean']>;
  homeCountryLT?: InputMaybe<Scalars['String']>;
  homeCountryLTE?: InputMaybe<Scalars['String']>;
  homeCountryNEQ?: InputMaybe<Scalars['String']>;
  homeCountryNotIn?: InputMaybe<Array<Scalars['String']>>;
  homeCountryNotNil?: InputMaybe<Scalars['Boolean']>;
  /** home_state field predicates */
  homeState?: InputMaybe<Scalars['String']>;
  homeStateContains?: InputMaybe<Scalars['String']>;
  homeStateContainsFold?: InputMaybe<Scalars['String']>;
  homeStateEqualFold?: InputMaybe<Scalars['String']>;
  homeStateGT?: InputMaybe<Scalars['String']>;
  homeStateGTE?: InputMaybe<Scalars['String']>;
  homeStateHasPrefix?: InputMaybe<Scalars['String']>;
  homeStateHasSuffix?: InputMaybe<Scalars['String']>;
  homeStateIn?: InputMaybe<Array<Scalars['String']>>;
  homeStateIsNil?: InputMaybe<Scalars['Boolean']>;
  homeStateLT?: InputMaybe<Scalars['String']>;
  homeStateLTE?: InputMaybe<Scalars['String']>;
  homeStateNEQ?: InputMaybe<Scalars['String']>;
  homeStateNotIn?: InputMaybe<Array<Scalars['String']>>;
  homeStateNotNil?: InputMaybe<Scalars['Boolean']>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>;
  idGT?: InputMaybe<Scalars['ID']>;
  idGTE?: InputMaybe<Scalars['ID']>;
  idIn?: InputMaybe<Array<Scalars['ID']>>;
  idLT?: InputMaybe<Scalars['ID']>;
  idLTE?: InputMaybe<Scalars['ID']>;
  idNEQ?: InputMaybe<Scalars['ID']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']>>;
  /** identity_provider_id field predicates */
  identityProviderID?: InputMaybe<Scalars['String']>;
  identityProviderIDContains?: InputMaybe<Scalars['String']>;
  identityProviderIDContainsFold?: InputMaybe<Scalars['String']>;
  identityProviderIDEqualFold?: InputMaybe<Scalars['String']>;
  identityProviderIDGT?: InputMaybe<Scalars['String']>;
  identityProviderIDGTE?: InputMaybe<Scalars['String']>;
  identityProviderIDHasPrefix?: InputMaybe<Scalars['String']>;
  identityProviderIDHasSuffix?: InputMaybe<Scalars['String']>;
  identityProviderIDIn?: InputMaybe<Array<Scalars['String']>>;
  identityProviderIDIsNil?: InputMaybe<Scalars['Boolean']>;
  identityProviderIDLT?: InputMaybe<Scalars['String']>;
  identityProviderIDLTE?: InputMaybe<Scalars['String']>;
  identityProviderIDNEQ?: InputMaybe<Scalars['String']>;
  identityProviderIDNotIn?: InputMaybe<Array<Scalars['String']>>;
  identityProviderIDNotNil?: InputMaybe<Scalars['Boolean']>;
  not?: InputMaybe<UserWhereInput>;
  /** offer_frequency field predicates */
  offerFrequency?: InputMaybe<UserOfferFrequency>;
  offerFrequencyIn?: InputMaybe<Array<UserOfferFrequency>>;
  offerFrequencyNEQ?: InputMaybe<UserOfferFrequency>;
  offerFrequencyNotIn?: InputMaybe<Array<UserOfferFrequency>>;
  or?: InputMaybe<Array<UserWhereInput>>;
};

export type GetUserHomeLocationQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type GetUserHomeLocationQuery = { __typename?: 'Query', node?: { __typename?: 'DiscountOffer', id: string } | { __typename?: 'Merchant', id: string } | { __typename?: 'Notification', id: string } | { __typename?: 'PlaidInstitution', id: string } | { __typename?: 'PlaidInstitutionAccount', id: string } | { __typename?: 'PlaidItem', id: string } | { __typename?: 'SpendingCategory', id: string } | { __typename?: 'Transaction', id: string } | { __typename?: 'TransactionSync', id: string } | { __typename?: 'User', homeCountry?: string | null, homeState?: string | null, homeCity?: string | null, id: string } | { __typename?: 'UserNotificationChannelPreferences', id: string } | null };

export type UpdateUserHomeLocationMutationVariables = Exact<{
  userId: Scalars['ID'];
  country: Scalars['String'];
  state: Scalars['String'];
  city: Scalars['String'];
}>;


export type UpdateUserHomeLocationMutation = { __typename?: 'Mutation', updateUser: { __typename?: 'User', homeCountry?: string | null, homeState?: string | null, homeCity?: string | null } };

export type CreateLinkTokenMutationVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type CreateLinkTokenMutation = { __typename?: 'Mutation', createLinkToken: { __typename?: 'LinkTokenHost', linkToken: string } };

export type ExchangePublicTokenMutationVariables = Exact<{
  userId: Scalars['ID'];
  publicToken: Scalars['String'];
}>;


export type ExchangePublicTokenMutation = { __typename?: 'Mutation', exchangePublicToken: string };

export type MarkNotificationAsCheckedInAppMutationVariables = Exact<{
  ids: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type MarkNotificationAsCheckedInAppMutation = { __typename?: 'Mutation', markNotificationsAsCheckedInApp: boolean };

export type GetUserUnreadNotificationsQueryVariables = Exact<{
  userId: Scalars['ID'];
  currentTime?: InputMaybe<Scalars['Time']>;
}>;


export type GetUserUnreadNotificationsQuery = { __typename?: 'Query', notifications: { __typename?: 'NotificationConnection', edges?: Array<{ __typename?: 'NotificationEdge', node?: { __typename?: 'Notification', id: string, type: NotificationType, checkedInApp: boolean, notificationDiscountOffer?: { __typename?: 'DiscountOffer', id: string, amount: number, type: DiscountOfferType, merchantSpecificIdentification: string, createdAt: any, expiresAt: any, ownerMerchant: { __typename?: 'Merchant', id: string, name: string } } | null } | null } | null> | null } };

export type SubscribeToNewNotificationsSubscriptionVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type SubscribeToNewNotificationsSubscription = { __typename?: 'Subscription', notification: { __typename?: 'Notification', id: string, type: NotificationType, checkedInApp: boolean, createdAt: any, notificationDiscountOffer?: { __typename?: 'DiscountOffer', id: string, amount: number, type: DiscountOfferType, merchantSpecificIdentification: string, createdAt: any, expiresAt: any, ownerMerchant: { __typename?: 'Merchant', id: string, name: string } } | null } };

export type GetAccountTransactionsQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;


export type GetAccountTransactionsQuery = { __typename?: 'Query', node?: { __typename?: 'DiscountOffer', id: string } | { __typename?: 'Merchant', id: string } | { __typename?: 'Notification', id: string } | { __typename?: 'PlaidInstitution', id: string } | { __typename?: 'PlaidInstitutionAccount', name: string, balanceAvailable: number, balanceCurrent: number, balanceIsoCurrencyCode: string, id: string, transactions: { __typename?: 'TransactionConnection', edges?: Array<{ __typename?: 'TransactionEdge', node?: { __typename?: 'Transaction', amount: number, isoCurrencyCode: string, name: string, merchantName: string, category?: string | null, date: string, datetime?: any | null } | null } | null> | null } } | { __typename?: 'PlaidItem', id: string } | { __typename?: 'SpendingCategory', id: string } | { __typename?: 'Transaction', id: string } | { __typename?: 'TransactionSync', id: string } | { __typename?: 'User', id: string } | { __typename?: 'UserNotificationChannelPreferences', id: string } | null };

export type GetAccountsAndTransactionsQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type GetAccountsAndTransactionsQuery = { __typename?: 'Query', plaidInstitutions?: { __typename?: 'PlaidInstitutionConnection', edges?: Array<{ __typename?: 'PlaidInstitutionEdge', node?: { __typename?: 'PlaidInstitution', id: string, name: string, accounts?: Array<{ __typename?: 'PlaidInstitutionAccount', id: string, name: string, balanceAvailable: number, balanceCurrent: number, balanceIsoCurrencyCode: string }> | null } | null } | null> | null } | null, transactions: { __typename?: 'TransactionConnection', edges?: Array<{ __typename?: 'TransactionEdge', node?: { __typename?: 'Transaction', amount: number, isoCurrencyCode: string, name: string, category?: string | null, date: string } | null } | null> | null } };

export type GetUserWithPlaidItemsQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type GetUserWithPlaidItemsQuery = { __typename?: 'Query', node?: { __typename?: 'DiscountOffer', id: string } | { __typename?: 'Merchant', id: string } | { __typename?: 'Notification', id: string } | { __typename?: 'PlaidInstitution', id: string } | { __typename?: 'PlaidInstitutionAccount', id: string } | { __typename?: 'PlaidItem', id: string } | { __typename?: 'SpendingCategory', id: string } | { __typename?: 'Transaction', id: string } | { __typename?: 'TransactionSync', id: string } | { __typename?: 'User', id: string, plaidItems?: Array<{ __typename?: 'PlaidItem', institution?: { __typename?: 'PlaidInstitution', name: string, accounts?: Array<{ __typename?: 'PlaidInstitutionAccount', id: string, name: string, type: string, balanceAvailable: number, balanceCurrent: number, balanceIsoCurrencyCode: string }> | null } | null }> | null } | { __typename?: 'UserNotificationChannelPreferences', id: string } | null };

export type GetActiveDiscountOffersQueryVariables = Exact<{
  userId: Scalars['ID'];
  currentTime?: InputMaybe<Scalars['Time']>;
}>;


export type GetActiveDiscountOffersQuery = { __typename?: 'Query', discountOffers: { __typename?: 'DiscountOfferConnection', edges?: Array<{ __typename?: 'DiscountOfferEdge', node?: { __typename?: 'DiscountOffer', id: string, amount: number, type: DiscountOfferType, merchantSpecificIdentification: string, expiresAt: any, ownerMerchant: { __typename?: 'Merchant', id: string, name: string } } | null } | null> | null } };

export type ExchangeAuthTokenForUserProfileMutationVariables = Exact<{
  identityProviderId: Scalars['String'];
}>;


export type ExchangeAuthTokenForUserProfileMutation = { __typename?: 'Mutation', exchangeAuthTokenForUserProfile: { __typename?: 'User', id: string, identityProviderID?: string | null } };

export type GetUserSettingsQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type GetUserSettingsQuery = { __typename?: 'Query', spendingCategories: { __typename?: 'SpendingCategoryConnection', edges?: Array<{ __typename?: 'SpendingCategoryEdge', node?: { __typename?: 'SpendingCategory', id: string, name: string } | null } | null> | null }, totalSpendingCategories: { __typename?: 'SpendingCategoryConnection', edges?: Array<{ __typename?: 'SpendingCategoryEdge', node?: { __typename?: 'SpendingCategory', id: string, name: string } | null } | null> | null }, notificationChannels: { __typename?: 'UserNotificationChannelPreferencesConnection', edges?: Array<{ __typename?: 'UserNotificationChannelPreferencesEdge', node?: { __typename?: 'UserNotificationChannelPreferences', chanel: UserNotificationChannelPreferencesChanel } | null } | null> | null }, offerFrequency?: { __typename?: 'DiscountOffer', id: string } | { __typename?: 'Merchant', id: string } | { __typename?: 'Notification', id: string } | { __typename?: 'PlaidInstitution', id: string } | { __typename?: 'PlaidInstitutionAccount', id: string } | { __typename?: 'PlaidItem', id: string } | { __typename?: 'SpendingCategory', id: string } | { __typename?: 'Transaction', id: string } | { __typename?: 'TransactionSync', id: string } | { __typename?: 'User', offerFrequency: UserOfferFrequency, id: string } | { __typename?: 'UserNotificationChannelPreferences', id: string } | null };

export type SaveSpendingCategoriesPreferencesMutationVariables = Exact<{
  userId: Scalars['ID'];
  selectedCategories: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type SaveSpendingCategoriesPreferencesMutation = { __typename?: 'Mutation', setSpendingCategories: { __typename?: 'User', spendingCategories?: Array<{ __typename?: 'SpendingCategory', id: string, name: string }> | null } };

export type SaveNotificationChannelPreferencesMutationVariables = Exact<{
  userId: Scalars['ID'];
  notificationChannels: Array<UserNotificationChannelPreferencesChanel> | UserNotificationChannelPreferencesChanel;
}>;


export type SaveNotificationChannelPreferencesMutation = { __typename?: 'Mutation', setNotificationChannels: { __typename?: 'User', notificationChannels?: Array<{ __typename?: 'UserNotificationChannelPreferences', chanel: UserNotificationChannelPreferencesChanel }> | null } };

export type SaveOfferFrequencyPreferencesMutationVariables = Exact<{
  userId: Scalars['ID'];
  frequency: UserOfferFrequency;
}>;


export type SaveOfferFrequencyPreferencesMutation = { __typename?: 'Mutation', setOfferFrequency: { __typename?: 'User', offerFrequency: UserOfferFrequency } };


export const GetUserHomeLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserHomeLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"homeCountry"}},{"kind":"Field","name":{"kind":"Name","value":"homeState"}},{"kind":"Field","name":{"kind":"Name","value":"homeCity"}}]}}]}}]}}]} as unknown as DocumentNode<GetUserHomeLocationQuery, GetUserHomeLocationQueryVariables>;
export const UpdateUserHomeLocationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUserHomeLocation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"country"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"state"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"city"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"homeCountry"},"value":{"kind":"Variable","name":{"kind":"Name","value":"country"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"homeState"},"value":{"kind":"Variable","name":{"kind":"Name","value":"state"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"homeCity"},"value":{"kind":"Variable","name":{"kind":"Name","value":"city"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"homeCountry"}},{"kind":"Field","name":{"kind":"Name","value":"homeState"}},{"kind":"Field","name":{"kind":"Name","value":"homeCity"}}]}}]}}]} as unknown as DocumentNode<UpdateUserHomeLocationMutation, UpdateUserHomeLocationMutationVariables>;
export const CreateLinkTokenDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateLinkToken"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createLinkToken"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"linkToken"}}]}}]}}]} as unknown as DocumentNode<CreateLinkTokenMutation, CreateLinkTokenMutationVariables>;
export const ExchangePublicTokenDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ExchangePublicToken"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"publicToken"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"exchangePublicToken"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"publicToken"},"value":{"kind":"Variable","name":{"kind":"Name","value":"publicToken"}}}]}}]}]}}]} as unknown as DocumentNode<ExchangePublicTokenMutation, ExchangePublicTokenMutationVariables>;
export const MarkNotificationAsCheckedInAppDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"MarkNotificationAsCheckedInApp"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"markNotificationsAsCheckedInApp"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"ids"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}]}}]} as unknown as DocumentNode<MarkNotificationAsCheckedInAppMutation, MarkNotificationAsCheckedInAppMutationVariables>;
export const GetUserUnreadNotificationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserUnreadNotifications"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"currentTime"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Time"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"notifications"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"checkedInApp"},"value":{"kind":"BooleanValue","value":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"or"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasNotificationDiscountOffer"},"value":{"kind":"BooleanValue","value":false}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasNotificationDiscountOfferWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"expiresAtGT"},"value":{"kind":"Variable","name":{"kind":"Name","value":"currentTime"}}}]}}]}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"hasNotificationRecipientWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"EnumValue","value":"CREATED_AT"}},{"kind":"ObjectField","name":{"kind":"Name","value":"direction"},"value":{"kind":"EnumValue","value":"DESC"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"checkedInApp"}},{"kind":"Field","name":{"kind":"Name","value":"notificationDiscountOffer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"merchantSpecificIdentification"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"expiresAt"}},{"kind":"Field","name":{"kind":"Name","value":"ownerMerchant"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetUserUnreadNotificationsQuery, GetUserUnreadNotificationsQueryVariables>;
export const SubscribeToNewNotificationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"SubscribeToNewNotifications"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"notification"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"ownerID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"checkedInApp"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"notificationDiscountOffer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"merchantSpecificIdentification"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"expiresAt"}},{"kind":"Field","name":{"kind":"Name","value":"ownerMerchant"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<SubscribeToNewNotificationsSubscription, SubscribeToNewNotificationsSubscriptionVariables>;
export const GetAccountTransactionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAccountTransactions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"accountId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"accountId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"PlaidInstitutionAccount"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"balanceAvailable"}},{"kind":"Field","name":{"kind":"Name","value":"balanceCurrent"}},{"kind":"Field","name":{"kind":"Name","value":"balanceIsoCurrencyCode"}},{"kind":"Field","name":{"kind":"Name","value":"transactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"EnumValue","value":"DATE"}},{"kind":"ObjectField","name":{"kind":"Name","value":"direction"},"value":{"kind":"EnumValue","value":"DESC"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"isoCurrencyCode"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"merchantName"}},{"kind":"Field","name":{"kind":"Name","value":"category"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"datetime"}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetAccountTransactionsQuery, GetAccountTransactionsQueryVariables>;
export const GetAccountsAndTransactionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAccountsAndTransactions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"plaidInstitutions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasPlaidItemWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasOwnerWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"accounts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"balanceAvailable"}},{"kind":"Field","name":{"kind":"Name","value":"balanceCurrent"}},{"kind":"Field","name":{"kind":"Name","value":"balanceIsoCurrencyCode"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"transactions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasInstitutionAccountWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasParentInstitutionWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasPlaidItemWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasOwnerWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"EnumValue","value":"DATE"}},{"kind":"ObjectField","name":{"kind":"Name","value":"direction"},"value":{"kind":"EnumValue","value":"DESC"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"isoCurrencyCode"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"category"}},{"kind":"Field","name":{"kind":"Name","value":"date"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetAccountsAndTransactionsQuery, GetAccountsAndTransactionsQueryVariables>;
export const GetUserWithPlaidItemsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserWithPlaidItems"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"plaidItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"institution"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"accounts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"balanceAvailable"}},{"kind":"Field","name":{"kind":"Name","value":"balanceCurrent"}},{"kind":"Field","name":{"kind":"Name","value":"balanceIsoCurrencyCode"}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetUserWithPlaidItemsQuery, GetUserWithPlaidItemsQueryVariables>;
export const GetActiveDiscountOffersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetActiveDiscountOffers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"currentTime"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Time"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"discountOffers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"expiresAtGTE"},"value":{"kind":"Variable","name":{"kind":"Name","value":"currentTime"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"hasDiscountEligibleUsersWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"EnumValue","value":"CREATED_AT"}},{"kind":"ObjectField","name":{"kind":"Name","value":"direction"},"value":{"kind":"EnumValue","value":"DESC"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"merchantSpecificIdentification"}},{"kind":"Field","name":{"kind":"Name","value":"expiresAt"}},{"kind":"Field","name":{"kind":"Name","value":"ownerMerchant"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetActiveDiscountOffersQuery, GetActiveDiscountOffersQueryVariables>;
export const ExchangeAuthTokenForUserProfileDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ExchangeAuthTokenForUserProfile"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"identityProviderId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"exchangeAuthTokenForUserProfile"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"identityProviderID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"identityProviderId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"identityProviderID"}}]}}]}}]} as unknown as DocumentNode<ExchangeAuthTokenForUserProfileMutation, ExchangeAuthTokenForUserProfileMutationVariables>;
export const GetUserSettingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserSettings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"spendingCategories"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasInterestedUsersWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"totalSpendingCategories"},"name":{"kind":"Name","value":"spendingCategories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"notificationChannels"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hasChanelUsersWith"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"chanel"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"offerFrequency"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"offerFrequency"}}]}}]}}]}}]} as unknown as DocumentNode<GetUserSettingsQuery, GetUserSettingsQueryVariables>;
export const SaveSpendingCategoriesPreferencesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveSpendingCategoriesPreferences"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"selectedCategories"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"setSpendingCategories"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"spendingCategoryIDs"},"value":{"kind":"Variable","name":{"kind":"Name","value":"selectedCategories"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"spendingCategories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<SaveSpendingCategoriesPreferencesMutation, SaveSpendingCategoriesPreferencesMutationVariables>;
export const SaveNotificationChannelPreferencesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveNotificationChannelPreferences"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"notificationChannels"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserNotificationChannelPreferencesChanel"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"setNotificationChannels"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"notificationChannel"},"value":{"kind":"Variable","name":{"kind":"Name","value":"notificationChannels"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"notificationChannels"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"chanel"}}]}}]}}]}}]} as unknown as DocumentNode<SaveNotificationChannelPreferencesMutation, SaveNotificationChannelPreferencesMutationVariables>;
export const SaveOfferFrequencyPreferencesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveOfferFrequencyPreferences"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"frequency"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserOfferFrequency"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"setOfferFrequency"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"frequency"},"value":{"kind":"Variable","name":{"kind":"Name","value":"frequency"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"offerFrequency"}}]}}]}}]} as unknown as DocumentNode<SaveOfferFrequencyPreferencesMutation, SaveOfferFrequencyPreferencesMutationVariables>;